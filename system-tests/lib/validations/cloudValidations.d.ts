// Generated by dts-bundle-generator v7.2.0

import type { z } from 'zod'
export interface SchemaVersion {
	[version: number]: {
		req: Zod.ZodType;
		reqExample: any;
		res: Zod.ZodType;
		resExample: any;
	};
}
export type RecordSchemaVersions = typeof recordSchemaVersions;
export declare const recordSchemaVersions: {
	createRun: {
		4: {
			req: z.ZodObject<{
				platform: z.ZodObject<{
					browserName: z.ZodString;
					browserVersion: z.ZodString;
					osCpus: z.ZodArray<z.ZodUnknown, "many">;
					osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
					osName: z.ZodString;
					osVersion: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				}, {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				}>;
				projectId: z.ZodString;
				recordKey: z.ZodString;
				specPattern: z.ZodNullable<z.ZodString>;
				specs: z.ZodArray<z.ZodString, "many">;
				ci: z.ZodObject<Omit<{
					buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
					params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
					provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
				}, "buildNumber">, "strip", z.ZodTypeAny, {
					params?: Record<string, any> | null | undefined;
					provider?: string | null | undefined;
				}, {
					params?: Record<string, any> | null | undefined;
					provider?: string | null | undefined;
				}>;
				commit: z.ZodObject<{
					message: z.ZodNullable<z.ZodString>;
					authorEmail: z.ZodNullable<z.ZodString>;
					authorName: z.ZodNullable<z.ZodString>;
					branch: z.ZodNullable<z.ZodString>;
					remoteOrigin: z.ZodNullable<z.ZodString>;
					sha: z.ZodNullable<z.ZodString>;
					defaultBranch: z.ZodNullable<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					message: string | null;
					authorEmail: string | null;
					authorName: string | null;
					branch: string | null;
					remoteOrigin: string | null;
					sha: string | null;
					defaultBranch: string | null;
				}, {
					message: string | null;
					authorEmail: string | null;
					authorName: string | null;
					branch: string | null;
					remoteOrigin: string | null;
					sha: string | null;
					defaultBranch: string | null;
				}>;
				ciBuildId: z.ZodNullable<z.ZodUnion<[
					z.ZodString,
					z.ZodNumber
				]>>;
				group: z.ZodNullable<z.ZodString>;
				parallel: z.ZodNullable<z.ZodBoolean>;
				runnerCapabilities: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
				testingType: z.ZodOptional<z.ZodEnum<[
					"e2e",
					"component",
					"ct"
				]>>;
				tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
				autoCancelAfterFailures: z.ZodOptional<z.ZodUnion<[
					z.ZodNumber,
					z.ZodLiteral<false>
				]>>;
			}, "strip", z.ZodTypeAny, {
				platform: {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				};
				projectId: string;
				recordKey: string;
				specPattern: string | null;
				specs: string[];
				ci: {
					params?: Record<string, any> | null | undefined;
					provider?: string | null | undefined;
				};
				commit: {
					message: string | null;
					authorEmail: string | null;
					authorName: string | null;
					branch: string | null;
					remoteOrigin: string | null;
					sha: string | null;
					defaultBranch: string | null;
				};
				ciBuildId: string | number | null;
				group: string | null;
				parallel: boolean | null;
				runnerCapabilities?: Record<string, unknown> | undefined;
				testingType?: "e2e" | "component" | "ct" | undefined;
				tags?: string[] | undefined;
				autoCancelAfterFailures?: number | false | undefined;
			}, {
				platform: {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				};
				projectId: string;
				recordKey: string;
				specPattern: string | null;
				specs: string[];
				ci: {
					params?: Record<string, any> | null | undefined;
					provider?: string | null | undefined;
				};
				commit: {
					message: string | null;
					authorEmail: string | null;
					authorName: string | null;
					branch: string | null;
					remoteOrigin: string | null;
					sha: string | null;
					defaultBranch: string | null;
				};
				ciBuildId: string | number | null;
				group: string | null;
				parallel: boolean | null;
				runnerCapabilities?: Record<string, unknown> | undefined;
				testingType?: "e2e" | "component" | "ct" | undefined;
				tags?: string[] | undefined;
				autoCancelAfterFailures?: number | false | undefined;
			}>;
			reqExample: {
				platform: {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				};
				projectId: string;
				recordKey: string;
				specPattern: string | null;
				specs: string[];
				ci: {
					params?: Record<string, any> | null | undefined;
					provider?: string | null | undefined;
				};
				commit: {
					message: string | null;
					authorEmail: string | null;
					authorName: string | null;
					branch: string | null;
					remoteOrigin: string | null;
					sha: string | null;
					defaultBranch: string | null;
				};
				ciBuildId: string | number | null;
				group: string | null;
				parallel: boolean | null;
				runnerCapabilities?: Record<string, unknown> | undefined;
				testingType?: "e2e" | "component" | "ct" | undefined;
				tags?: string[] | undefined;
				autoCancelAfterFailures?: number | false | undefined;
			};
			res: z.ZodObject<{
				groupId: z.ZodString;
				machineId: z.ZodString;
				runId: z.ZodString;
				runUrl: z.ZodString;
				warnings: z.ZodArray<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
					code: z.ZodString;
					message: z.ZodString;
					name: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					code: string;
					message: string;
					name: string;
				}, {
					code: string;
					message: string;
					name: string;
				}>>, "many">;
				tags: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
			}, "strip", z.ZodTypeAny, {
				groupId: string;
				machineId: string;
				tags: string[] | null;
				runId: string;
				runUrl: string;
				warnings: (Record<string, unknown> & {
					code: string;
					message: string;
					name: string;
				})[];
			}, {
				groupId: string;
				machineId: string;
				tags: string[] | null;
				runId: string;
				runUrl: string;
				warnings: (Record<string, unknown> & {
					code: string;
					message: string;
					name: string;
				})[];
			}>;
			resExample: {
				groupId: string;
				machineId: string;
				tags: string[] | null;
				runId: string;
				runUrl: string;
				warnings: (Record<string, unknown> & {
					code: string;
					message: string;
					name: string;
				})[];
			};
		};
	};
	createInstance: {
		5: {
			req: z.ZodObject<{
				groupId: z.ZodString;
				machineId: z.ZodString;
				platform: z.ZodObject<{
					browserName: z.ZodString;
					browserVersion: z.ZodString;
					osCpus: z.ZodArray<z.ZodUnknown, "many">;
					osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
					osName: z.ZodString;
					osVersion: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				}, {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				}>;
				spec: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				spec: string | null;
				groupId: string;
				machineId: string;
				platform: {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				};
			}, {
				spec: string | null;
				groupId: string;
				machineId: string;
				platform: {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				};
			}>;
			reqExample: {
				spec: string | null;
				groupId: string;
				machineId: string;
				platform: {
					browserName: string;
					browserVersion: string;
					osCpus: unknown[];
					osMemory: Record<string, unknown> | null;
					osName: string;
					osVersion: string;
				};
			};
			res: z.ZodObject<{
				claimedInstances: z.ZodNumber;
				estimatedWallClockDuration: z.ZodNullable<z.ZodNumber>;
				instanceId: z.ZodNullable<z.ZodString>;
				spec: z.ZodNullable<z.ZodString>;
				totalInstances: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				spec: string | null;
				claimedInstances: number;
				estimatedWallClockDuration: number | null;
				instanceId: string | null;
				totalInstances: number;
			}, {
				spec: string | null;
				claimedInstances: number;
				estimatedWallClockDuration: number | null;
				instanceId: string | null;
				totalInstances: number;
			}>;
			resExample: {
				spec: string | null;
				claimedInstances: number;
				estimatedWallClockDuration: number | null;
				instanceId: string | null;
				totalInstances: number;
			};
		};
	};
	updateInstanceStdout: {
		1: {
			req: z.ZodObject<{
				stdout: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				stdout: string;
			}, {
				stdout: string;
			}>;
			reqExample: {
				stdout: string;
			};
			res: z.ZodAny;
			resExample: {};
		};
	};
	postInstanceTests: {
		1: {
			req: z.ZodObject<{
				config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
				hooks: z.ZodArray<z.ZodObject<{
					body: z.ZodString;
					clientId: z.ZodString;
					title: z.ZodArray<z.ZodString, "many">;
					type: z.ZodEnum<[
						"before each",
						"before all",
						"after each",
						"after all"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "before each" | "before all" | "after each" | "after all";
					clientId: string;
					title: string[];
					body: string;
				}, {
					type: "before each" | "before all" | "after each" | "after all";
					clientId: string;
					title: string[];
					body: string;
				}>, "many">;
				tests: z.ZodArray<z.ZodObject<{
					body: z.ZodNullable<z.ZodString>;
					clientId: z.ZodString;
					config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
					hookIds: z.ZodArray<z.ZodString, "many">;
					title: z.ZodArray<z.ZodString, "many">;
				}, "strip", z.ZodTypeAny, {
					clientId: string;
					title: string[];
					body: string | null;
					config: Record<string, unknown>;
					hookIds: string[];
				}, {
					clientId: string;
					title: string[];
					body: string | null;
					config: Record<string, unknown>;
					hookIds: string[];
				}>, "many">;
			}, "strip", z.ZodTypeAny, {
				tests: {
					clientId: string;
					title: string[];
					body: string | null;
					config: Record<string, unknown>;
					hookIds: string[];
				}[];
				hooks: {
					type: "before each" | "before all" | "after each" | "after all";
					clientId: string;
					title: string[];
					body: string;
				}[];
				config: Record<string, unknown>;
			}, {
				tests: {
					clientId: string;
					title: string[];
					body: string | null;
					config: Record<string, unknown>;
					hookIds: string[];
				}[];
				hooks: {
					type: "before each" | "before all" | "after each" | "after all";
					clientId: string;
					title: string[];
					body: string;
				}[];
				config: Record<string, unknown>;
			}>;
			reqExample: {
				tests: {
					clientId: string;
					title: string[];
					body: string | null;
					config: Record<string, unknown>;
					hookIds: string[];
				}[];
				hooks: {
					type: "before each" | "before all" | "after each" | "after all";
					clientId: string;
					title: string[];
					body: string;
				}[];
				config: Record<string, unknown>;
			};
			res: z.ZodObject<{
				actions: z.ZodNullable<z.ZodArray<z.ZodObject<{
					action: z.ZodEnum<[
						"SKIP",
						"MUTE",
						"BURN_IN"
					]>;
					clientId: z.ZodNullable<z.ZodString>;
					payload: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
					type: z.ZodEnum<[
						"SPEC",
						"TEST"
					]>;
				}, "strip", z.ZodTypeAny, {
					type: "SPEC" | "TEST";
					clientId: string | null;
					action: "SKIP" | "MUTE" | "BURN_IN";
					payload: Record<string, unknown> | null;
				}, {
					type: "SPEC" | "TEST";
					clientId: string | null;
					action: "SKIP" | "MUTE" | "BURN_IN";
					payload: Record<string, unknown> | null;
				}>, "many">>;
				claimedInstances: z.ZodNumber;
				estimatedWallClockDuration: z.ZodNullable<z.ZodNumber>;
				instanceId: z.ZodNullable<z.ZodString>;
				spec: z.ZodNullable<z.ZodString>;
				totalInstances: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				spec: string | null;
				actions: {
					type: "SPEC" | "TEST";
					clientId: string | null;
					action: "SKIP" | "MUTE" | "BURN_IN";
					payload: Record<string, unknown> | null;
				}[] | null;
				claimedInstances: number;
				estimatedWallClockDuration: number | null;
				instanceId: string | null;
				totalInstances: number;
			}, {
				spec: string | null;
				actions: {
					type: "SPEC" | "TEST";
					clientId: string | null;
					action: "SKIP" | "MUTE" | "BURN_IN";
					payload: Record<string, unknown> | null;
				}[] | null;
				claimedInstances: number;
				estimatedWallClockDuration: number | null;
				instanceId: string | null;
				totalInstances: number;
			}>;
			resExample: {
				spec: string | null;
				actions: {
					type: "SPEC" | "TEST";
					clientId: string | null;
					action: "SKIP" | "MUTE" | "BURN_IN";
					payload: Record<string, unknown> | null;
				}[] | null;
				claimedInstances: number;
				estimatedWallClockDuration: number | null;
				instanceId: string | null;
				totalInstances: number;
			};
		};
	};
	postInstanceResults: {
		1: {
			req: z.ZodObject<{
				screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
					height: z.ZodNumber;
					name: z.ZodNullable<z.ZodString>;
					screenshotId: z.ZodString;
					takenAt: z.ZodString;
					testId: z.ZodString;
					width: z.ZodNumber;
					testAttemptIndex: z.ZodOptional<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					height: number;
					testId: string;
					width: number;
					name: string | null;
					screenshotId: string;
					takenAt: string;
					testAttemptIndex?: number | undefined;
				}, {
					height: number;
					testId: string;
					width: number;
					name: string | null;
					screenshotId: string;
					takenAt: string;
					testAttemptIndex?: number | undefined;
				}>, "many">>;
				video: z.ZodBoolean;
				reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
					duration: z.ZodNumber;
					end: z.ZodString;
					start: z.ZodString;
					failures: z.ZodNumber;
					passes: z.ZodNumber;
					pending: z.ZodNumber;
					suites: z.ZodNumber;
					tests: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					pending: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					duration: number;
					end: string;
					start: string;
				}, {
					pending: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					duration: number;
					end: string;
					start: string;
				}>>>;
				stats: z.ZodObject<{
					failures: z.ZodNumber;
					passes: z.ZodNumber;
					pending: z.ZodNumber;
					skipped: z.ZodNumber;
					suites: z.ZodNumber;
					tests: z.ZodNumber;
					wallClockDuration: z.ZodNumber;
					wallClockEndedAt: z.ZodString;
					wallClockStartedAt: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					pending: number;
					skipped: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					wallClockDuration: number;
					wallClockEndedAt: string;
					wallClockStartedAt: string;
				}, {
					pending: number;
					skipped: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					wallClockDuration: number;
					wallClockEndedAt: string;
					wallClockStartedAt: string;
				}>;
				exception: z.ZodOptional<z.ZodNullable<z.ZodString>>;
				tests: z.ZodArray<z.ZodObject<{
					attempts: z.ZodArray<z.ZodObject<{
						error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
							codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
								absoluteFile: z.ZodNullable<z.ZodString>;
								column: z.ZodNullable<z.ZodNumber>;
								frame: z.ZodNullable<z.ZodString>;
								language: z.ZodNullable<z.ZodString>;
								line: z.ZodNullable<z.ZodNumber>;
								originalFile: z.ZodNullable<z.ZodString>;
								relativeFile: z.ZodNullable<z.ZodString>;
							}, "strip", z.ZodTypeAny, {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							}, {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							}>>>;
							message: z.ZodNullable<z.ZodString>;
							name: z.ZodNullable<z.ZodString>;
							stack: z.ZodNullable<z.ZodString>;
						}, "strip", z.ZodTypeAny, {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}, {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}>>>;
						failedFromHookId: z.ZodNullable<z.ZodString>;
						state: z.ZodEnum<[
							"passed",
							"pending",
							"skipped",
							"failed",
							"running",
							"cancelled",
							"errored",
							"timedOut"
						]>;
						timings: z.ZodNullable<z.ZodObject<{
							test: z.ZodOptional<z.ZodObject<{
								fnDuration: z.ZodNumber;
								afterFnDuration: z.ZodNumber;
							}, "strip", z.ZodTypeAny, {
								fnDuration: number;
								afterFnDuration: number;
							}, {
								fnDuration: number;
								afterFnDuration: number;
							}>>;
							lifecycle: z.ZodOptional<z.ZodNumber>;
							"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
								hookId: z.ZodString;
								fnDuration: z.ZodNumber;
								afterFnDuration: z.ZodNumber;
							}, "strip", z.ZodTypeAny, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}>, "many">>;
							"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
								hookId: z.ZodString;
								fnDuration: z.ZodNumber;
								afterFnDuration: z.ZodNumber;
							}, "strip", z.ZodTypeAny, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}>, "many">>;
							"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
								hookId: z.ZodString;
								fnDuration: z.ZodNumber;
								afterFnDuration: z.ZodNumber;
							}, "strip", z.ZodTypeAny, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}>, "many">>;
							"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
								hookId: z.ZodString;
								fnDuration: z.ZodNumber;
								afterFnDuration: z.ZodNumber;
							}, "strip", z.ZodTypeAny, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}, {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}>, "many">>;
						}, "strip", z.ZodTypeAny, {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						}, {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						}>>;
						videoTimestamp: z.ZodNullable<z.ZodNumber>;
						wallClockDuration: z.ZodNullable<z.ZodNumber>;
						wallClockStartedAt: z.ZodNullable<z.ZodString>;
					}, "strip", z.ZodTypeAny, {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}, {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}>, "many">;
					clientId: z.ZodString;
					displayError: z.ZodNullable<z.ZodString>;
					state: z.ZodEnum<[
						"passed",
						"pending",
						"skipped",
						"failed",
						"running",
						"cancelled",
						"errored",
						"timedOut"
					]>;
				}, "strip", z.ZodTypeAny, {
					clientId: string;
					state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
					attempts: {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}[];
					displayError: string | null;
				}, {
					clientId: string;
					state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
					attempts: {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}[];
					displayError: string | null;
				}>, "many">;
				metadata: z.ZodOptional<z.ZodNullable<z.ZodObject<{
					studioCreated: z.ZodNullable<z.ZodNumber>;
					studioExtended: z.ZodNullable<z.ZodNumber>;
				}, "strip", z.ZodTypeAny, {
					studioCreated: number | null;
					studioExtended: number | null;
				}, {
					studioCreated: number | null;
					studioExtended: number | null;
				}>>>;
			}, "strip", z.ZodTypeAny, {
				tests: {
					clientId: string;
					state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
					attempts: {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}[];
					displayError: string | null;
				}[];
				screenshots: {
					height: number;
					testId: string;
					width: number;
					name: string | null;
					screenshotId: string;
					takenAt: string;
					testAttemptIndex?: number | undefined;
				}[] | null;
				video: boolean;
				reporterStats: (Record<string, unknown> & {
					pending: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					duration: number;
					end: string;
					start: string;
				}) | null;
				stats: {
					pending: number;
					skipped: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					wallClockDuration: number;
					wallClockEndedAt: string;
					wallClockStartedAt: string;
				};
				exception?: string | null | undefined;
				metadata?: {
					studioCreated: number | null;
					studioExtended: number | null;
				} | null | undefined;
			}, {
				tests: {
					clientId: string;
					state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
					attempts: {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}[];
					displayError: string | null;
				}[];
				screenshots: {
					height: number;
					testId: string;
					width: number;
					name: string | null;
					screenshotId: string;
					takenAt: string;
					testAttemptIndex?: number | undefined;
				}[] | null;
				video: boolean;
				reporterStats: (Record<string, unknown> & {
					pending: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					duration: number;
					end: string;
					start: string;
				}) | null;
				stats: {
					pending: number;
					skipped: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					wallClockDuration: number;
					wallClockEndedAt: string;
					wallClockStartedAt: string;
				};
				exception?: string | null | undefined;
				metadata?: {
					studioCreated: number | null;
					studioExtended: number | null;
				} | null | undefined;
			}>;
			reqExample: {
				tests: {
					clientId: string;
					state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
					attempts: {
						wallClockDuration: number | null;
						wallClockStartedAt: string | null;
						error: (Record<string, unknown> & {
							message: string | null;
							name: string | null;
							stack: string | null;
							codeFrame?: {
								absoluteFile: string | null;
								column: number | null;
								frame: string | null;
								language: string | null;
								line: number | null;
								originalFile: string | null;
								relativeFile: string | null;
							} | null | undefined;
						}) | null;
						failedFromHookId: string | null;
						state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
						timings: {
							test?: {
								fnDuration: number;
								afterFnDuration: number;
							} | undefined;
							lifecycle?: number | undefined;
							"before each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"before all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after each"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
							"after all"?: {
								hookId: string;
								fnDuration: number;
								afterFnDuration: number;
							}[] | undefined;
						} | null;
						videoTimestamp: number | null;
					}[];
					displayError: string | null;
				}[];
				screenshots: {
					height: number;
					testId: string;
					width: number;
					name: string | null;
					screenshotId: string;
					takenAt: string;
					testAttemptIndex?: number | undefined;
				}[] | null;
				video: boolean;
				reporterStats: (Record<string, unknown> & {
					pending: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					duration: number;
					end: string;
					start: string;
				}) | null;
				stats: {
					pending: number;
					skipped: number;
					failures: number;
					passes: number;
					suites: number;
					tests: number;
					wallClockDuration: number;
					wallClockEndedAt: string;
					wallClockStartedAt: string;
				};
				exception?: string | null | undefined;
				metadata?: {
					studioCreated: number | null;
					studioExtended: number | null;
				} | null | undefined;
			};
			res: z.ZodObject<{
				screenshotUploadUrls: z.ZodArray<z.ZodObject<{
					screenshotId: z.ZodString;
					uploadUrl: z.ZodString;
				}, "strip", z.ZodTypeAny, {
					screenshotId: string;
					uploadUrl: string;
				}, {
					screenshotId: string;
					uploadUrl: string;
				}>, "many">;
				videoUploadUrl: z.ZodOptional<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				screenshotUploadUrls: {
					screenshotId: string;
					uploadUrl: string;
				}[];
				videoUploadUrl?: string | undefined;
			}, {
				screenshotUploadUrls: {
					screenshotId: string;
					uploadUrl: string;
				}[];
				videoUploadUrl?: string | undefined;
			}>;
			resExample: {
				screenshotUploadUrls: {
					screenshotId: string;
					uploadUrl: string;
				}[];
				videoUploadUrl?: string | undefined;
			};
		};
	};
};
export declare const commitSha: z.ZodString;
export declare const commitShaExamples: z.infer<typeof commitSha>[];
export declare const dateTime: z.ZodString;
export declare const dateTimeExample: z.infer<typeof dateTime>[];
export declare const durationEstimate: z.ZodString;
export declare const durationEstimateExample: z.infer<typeof durationEstimate>[];
export declare const hookId: z.ZodString;
export declare const hookIdExample: z.infer<typeof hookId>[];
export declare const instanceStatus: z.ZodEnum<[
	"unclaimed",
	"running",
	"errored",
	"timedOut",
	"failed",
	"passed",
	"noTests",
	"cancelled"
]>;
export declare const instanceStatusExample: z.infer<typeof instanceStatus>[];
export declare const projectId: z.ZodString;
export declare const projectIdExample: z.infer<typeof projectId>[];
export declare const runStatus: z.ZodEnum<[
	"running",
	"errored",
	"failed",
	"timedOut",
	"noTests",
	"passed",
	"overLimit",
	"cancelled"
]>;
export declare const runStatusExample: z.infer<typeof runStatus>[];
export declare const semver: z.ZodString;
export declare const semverExample: z.infer<typeof semver>[];
export declare const testId: z.ZodString;
export declare const testIdExample: z.infer<typeof testId>[];
export declare const testState: z.ZodEnum<[
	"passed",
	"pending",
	"skipped",
	"failed",
	"running",
	"cancelled",
	"errored",
	"timedOut"
]>;
export declare const testStateExample: z.infer<typeof testState>;
export declare const uuid: z.ZodString;
export declare const uuidExample: z.infer<typeof uuid>[];
export declare const HOOK_TYPE: readonly [
	"before each",
	"before all",
	"after each",
	"after all"
];
export declare const hookType: z.ZodEnum<[
	"before each",
	"before all",
	"after each",
	"after all"
]>;
export declare const screenshotUploadUrl_v1: z.ZodObject<{
	clientId: z.ZodString;
	uploadUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
	clientId: string;
	uploadUrl: string;
}, {
	clientId: string;
	uploadUrl: string;
}>;
declare const screenshotUploadUrl_v1Strict: z.ZodObject<{
	clientId: z.ZodString;
	uploadUrl: z.ZodString;
}, "strict", z.ZodTypeAny, {
	clientId: string;
	uploadUrl: string;
}, {
	clientId: string;
	uploadUrl: string;
}>;
export declare const screenshotUploadUrl_v1Example: z.infer<typeof screenshotUploadUrl_v1Strict>;
export declare const screenshotUploadUrl_v2: z.ZodObject<{
	screenshotId: z.ZodString;
	uploadUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
	screenshotId: string;
	uploadUrl: string;
}, {
	screenshotId: string;
	uploadUrl: string;
}>;
declare const screenshotUploadUrl_v2Strict: z.ZodObject<{
	screenshotId: z.ZodString;
	uploadUrl: z.ZodString;
}, "strict", z.ZodTypeAny, {
	screenshotId: string;
	uploadUrl: string;
}, {
	screenshotId: string;
	uploadUrl: string;
}>;
export declare const screenshotUploadUrl_v2Example: z.infer<typeof screenshotUploadUrl_v2Strict>;
export declare const testAction_v1: z.ZodObject<{
	action: z.ZodEnum<[
		"SKIP",
		"MUTE",
		"BURN_IN"
	]>;
	clientId: z.ZodNullable<z.ZodString>;
	payload: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
	type: z.ZodEnum<[
		"SPEC",
		"TEST"
	]>;
}, "strip", z.ZodTypeAny, {
	type: "SPEC" | "TEST";
	clientId: string | null;
	action: "SKIP" | "MUTE" | "BURN_IN";
	payload: Record<string, unknown> | null;
}, {
	type: "SPEC" | "TEST";
	clientId: string | null;
	action: "SKIP" | "MUTE" | "BURN_IN";
	payload: Record<string, unknown> | null;
}>;
export type TestAction_v1Type = z.infer<typeof testAction_v1>;
declare const testAction_v1Strict: z.ZodObject<{
	action: z.ZodEnum<[
		"SKIP",
		"MUTE",
		"BURN_IN"
	]>;
	clientId: z.ZodNullable<z.ZodString>;
	payload: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
	type: z.ZodEnum<[
		"SPEC",
		"TEST"
	]>;
}, "strict", z.ZodTypeAny, {
	type: "SPEC" | "TEST";
	clientId: string | null;
	action: "SKIP" | "MUTE" | "BURN_IN";
	payload: Record<string, unknown> | null;
}, {
	type: "SPEC" | "TEST";
	clientId: string | null;
	action: "SKIP" | "MUTE" | "BURN_IN";
	payload: Record<string, unknown> | null;
}>;
export declare const testAction_v1Example: z.infer<typeof testAction_v1Strict>;
export declare const testRunnerCI_v1: z.ZodObject<{
	buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
	provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
	buildNumber?: string | null | undefined;
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}, {
	buildNumber?: string | null | undefined;
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}>;
declare const testRunnerCI_v1Strict: z.ZodObject<{
	buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
	provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strict", z.ZodTypeAny, {
	buildNumber?: string | null | undefined;
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}, {
	buildNumber?: string | null | undefined;
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}>;
export declare const testRunnerCI_v1Example: z.infer<typeof testRunnerCI_v1Strict>;
export declare const testRunnerCI_v2: z.ZodObject<Omit<{
	buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
	provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "buildNumber">, "strip", z.ZodTypeAny, {
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}, {
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}>;
export type TestRunnerCI_v2Type = z.infer<typeof testRunnerCI_v2>;
declare const testRunnerCI_v2Strict: z.ZodObject<Omit<{
	buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
	provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "buildNumber">, "strict", z.ZodTypeAny, {
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}, {
	params?: Record<string, any> | null | undefined;
	provider?: string | null | undefined;
}>;
export declare const testRunnerCI_v2Example: z.infer<typeof testRunnerCI_v2Strict>;
export declare const testRunnerCapabilities_v1: z.ZodObject<{
	dynamicSpecsInSerialMode: z.ZodOptional<z.ZodLiteral<true>>;
	muteTestAction: z.ZodOptional<z.ZodLiteral<true>>;
	skipSpecAction: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
	dynamicSpecsInSerialMode?: true | undefined;
	muteTestAction?: true | undefined;
	skipSpecAction?: true | undefined;
}, {
	dynamicSpecsInSerialMode?: true | undefined;
	muteTestAction?: true | undefined;
	skipSpecAction?: true | undefined;
}>;
declare const testRunnerCapabilities_v1Strict: z.ZodObject<{
	dynamicSpecsInSerialMode: z.ZodOptional<z.ZodLiteral<true>>;
	muteTestAction: z.ZodOptional<z.ZodLiteral<true>>;
	skipSpecAction: z.ZodOptional<z.ZodLiteral<true>>;
}, "strict", z.ZodTypeAny, {
	dynamicSpecsInSerialMode?: true | undefined;
	muteTestAction?: true | undefined;
	skipSpecAction?: true | undefined;
}, {
	dynamicSpecsInSerialMode?: true | undefined;
	muteTestAction?: true | undefined;
	skipSpecAction?: true | undefined;
}>;
export declare const testRunnerCapabilities_v1Example: z.infer<typeof testRunnerCapabilities_v1Strict>;
export declare const testRunnerCodeFrame_v1: z.ZodObject<{
	absoluteFile: z.ZodNullable<z.ZodString>;
	column: z.ZodNullable<z.ZodNumber>;
	frame: z.ZodNullable<z.ZodString>;
	language: z.ZodNullable<z.ZodString>;
	line: z.ZodNullable<z.ZodNumber>;
	originalFile: z.ZodNullable<z.ZodString>;
	relativeFile: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	absoluteFile: string | null;
	column: number | null;
	frame: string | null;
	language: string | null;
	line: number | null;
	originalFile: string | null;
	relativeFile: string | null;
}, {
	absoluteFile: string | null;
	column: number | null;
	frame: string | null;
	language: string | null;
	line: number | null;
	originalFile: string | null;
	relativeFile: string | null;
}>;
declare const testRunnerCodeFrame_v1Strict: z.ZodObject<{
	absoluteFile: z.ZodNullable<z.ZodString>;
	column: z.ZodNullable<z.ZodNumber>;
	frame: z.ZodNullable<z.ZodString>;
	language: z.ZodNullable<z.ZodString>;
	line: z.ZodNullable<z.ZodNumber>;
	originalFile: z.ZodNullable<z.ZodString>;
	relativeFile: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	absoluteFile: string | null;
	column: number | null;
	frame: string | null;
	language: string | null;
	line: number | null;
	originalFile: string | null;
	relativeFile: string | null;
}, {
	absoluteFile: string | null;
	column: number | null;
	frame: string | null;
	language: string | null;
	line: number | null;
	originalFile: string | null;
	relativeFile: string | null;
}>;
export declare const testRunnerCodeFrame_v1Example: z.infer<typeof testRunnerCodeFrame_v1Strict>;
export declare const testRunnerCommit_v1: z.ZodObject<{
	authorEmail: z.ZodNullable<z.ZodString>;
	authorName: z.ZodNullable<z.ZodString>;
	branch: z.ZodNullable<z.ZodString>;
	message: z.ZodNullable<z.ZodString>;
	remoteOrigin: z.ZodNullable<z.ZodString>;
	sha: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
}, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
}>;
declare const testRunnerCommit_v1Strict: z.ZodObject<{
	authorEmail: z.ZodNullable<z.ZodString>;
	authorName: z.ZodNullable<z.ZodString>;
	branch: z.ZodNullable<z.ZodString>;
	message: z.ZodNullable<z.ZodString>;
	remoteOrigin: z.ZodNullable<z.ZodString>;
	sha: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
}, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
}>;
export declare const testRunnerCommit_v1Example: z.infer<typeof testRunnerCommit_v1Strict>;
export declare const testRunnerCommit_v2: z.ZodObject<{
	message: z.ZodNullable<z.ZodString>;
	authorEmail: z.ZodNullable<z.ZodString>;
	authorName: z.ZodNullable<z.ZodString>;
	branch: z.ZodNullable<z.ZodString>;
	remoteOrigin: z.ZodNullable<z.ZodString>;
	sha: z.ZodNullable<z.ZodString>;
	defaultBranch: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
	defaultBranch: string | null;
}, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
	defaultBranch: string | null;
}>;
declare const testRunnerCommit_v2Strict: z.ZodObject<{
	message: z.ZodNullable<z.ZodString>;
	authorEmail: z.ZodNullable<z.ZodString>;
	authorName: z.ZodNullable<z.ZodString>;
	branch: z.ZodNullable<z.ZodString>;
	remoteOrigin: z.ZodNullable<z.ZodString>;
	sha: z.ZodNullable<z.ZodString>;
	defaultBranch: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
	defaultBranch: string | null;
}, {
	message: string | null;
	authorEmail: string | null;
	authorName: string | null;
	branch: string | null;
	remoteOrigin: string | null;
	sha: string | null;
	defaultBranch: string | null;
}>;
export declare const testRunnerCommit_v2Example: z.infer<typeof testRunnerCommit_v2Strict>;
/**
 * Similar to Mocha reporter stats but with "skipped" count
 */
export declare const testRunnerCypressStats_v1: z.ZodObject<{
	failures: z.ZodNumber;
	passes: z.ZodNumber;
	pending: z.ZodNumber;
	skipped: z.ZodNumber;
	suites: z.ZodNumber;
	tests: z.ZodNumber;
	wallClockDuration: z.ZodNumber;
	wallClockEndedAt: z.ZodString;
	wallClockStartedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
	pending: number;
	skipped: number;
	failures: number;
	passes: number;
	suites: number;
	tests: number;
	wallClockDuration: number;
	wallClockEndedAt: string;
	wallClockStartedAt: string;
}, {
	pending: number;
	skipped: number;
	failures: number;
	passes: number;
	suites: number;
	tests: number;
	wallClockDuration: number;
	wallClockEndedAt: string;
	wallClockStartedAt: string;
}>;
export declare const testRunnerCypressStats_v1Strict: z.ZodObject<{
	failures: z.ZodNumber;
	passes: z.ZodNumber;
	pending: z.ZodNumber;
	skipped: z.ZodNumber;
	suites: z.ZodNumber;
	tests: z.ZodNumber;
	wallClockDuration: z.ZodNumber;
	wallClockEndedAt: z.ZodString;
	wallClockStartedAt: z.ZodString;
}, "strict", z.ZodTypeAny, {
	pending: number;
	skipped: number;
	failures: number;
	passes: number;
	suites: number;
	tests: number;
	wallClockDuration: number;
	wallClockEndedAt: string;
	wallClockStartedAt: string;
}, {
	pending: number;
	skipped: number;
	failures: number;
	passes: number;
	suites: number;
	tests: number;
	wallClockDuration: number;
	wallClockEndedAt: string;
	wallClockStartedAt: string;
}>;
export declare const testRunnerCypressStats_v1Example: z.infer<typeof testRunnerCypressStats_v1Strict>;
export declare const testRunnerFailingTest_v1: z.ZodObject<{
	clientId: z.ZodString;
	duration: z.ZodNumber;
	error: z.ZodString;
	stack: z.ZodString;
	title: z.ZodString;
	videoTimestamp: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	error: string;
	duration: number;
	clientId: string;
	title: string;
	stack: string;
	videoTimestamp: number;
}, {
	error: string;
	duration: number;
	clientId: string;
	title: string;
	stack: string;
	videoTimestamp: number;
}>;
declare const testRunnerFailingTest_v1Strict: z.ZodObject<{
	clientId: z.ZodString;
	duration: z.ZodNumber;
	error: z.ZodString;
	stack: z.ZodString;
	title: z.ZodString;
	videoTimestamp: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
	error: string;
	duration: number;
	clientId: string;
	title: string;
	stack: string;
	videoTimestamp: number;
}, {
	error: string;
	duration: number;
	clientId: string;
	title: string;
	stack: string;
	videoTimestamp: number;
}>;
export declare const testRunnerFailingTest_v1Example: z.infer<typeof testRunnerFailingTest_v1Strict>;
export declare const testRunnerHook_v1: z.ZodObject<{
	body: z.ZodString;
	hookId: z.ZodString;
	hookName: z.ZodString;
	title: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
	title: string[];
	hookId: string;
	body: string;
	hookName: string;
}, {
	title: string[];
	hookId: string;
	body: string;
	hookName: string;
}>;
declare const testRunnerHook_v1Strict: z.ZodObject<{
	body: z.ZodString;
	hookId: z.ZodString;
	hookName: z.ZodString;
	title: z.ZodArray<z.ZodString, "many">;
}, "strict", z.ZodTypeAny, {
	title: string[];
	hookId: string;
	body: string;
	hookName: string;
}, {
	title: string[];
	hookId: string;
	body: string;
	hookName: string;
}>;
export declare const testRunnerHook_v1Example: z.infer<typeof testRunnerHook_v1Strict>;
export declare const testRunnerHook_v2: z.ZodObject<{
	body: z.ZodString;
	clientId: z.ZodString;
	title: z.ZodArray<z.ZodString, "many">;
	type: z.ZodEnum<[
		"before each",
		"before all",
		"after each",
		"after all"
	]>;
}, "strip", z.ZodTypeAny, {
	type: "before each" | "before all" | "after each" | "after all";
	clientId: string;
	title: string[];
	body: string;
}, {
	type: "before each" | "before all" | "after each" | "after all";
	clientId: string;
	title: string[];
	body: string;
}>;
export type TestRunnerHook_v2Type = z.infer<typeof testRunnerHook_v2>;
declare const testRunnerHook_v2Strict: z.ZodObject<{
	body: z.ZodString;
	clientId: z.ZodString;
	title: z.ZodArray<z.ZodString, "many">;
	type: z.ZodEnum<[
		"before each",
		"before all",
		"after each",
		"after all"
	]>;
}, "strict", z.ZodTypeAny, {
	type: "before each" | "before all" | "after each" | "after all";
	clientId: string;
	title: string[];
	body: string;
}, {
	type: "before each" | "before all" | "after each" | "after all";
	clientId: string;
	title: string[];
	body: string;
}>;
export declare const testRunnerHook_v2Example: z.infer<typeof testRunnerHook_v2Strict>;
/**
 * Stats from Mocha reporter - really dynamic and depends on the reporter
 */
export declare const testRunnerMochaReporterStats_v1: z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
	duration: z.ZodNumber;
	end: z.ZodString;
	start: z.ZodString;
	failures: z.ZodNumber;
	passes: z.ZodNumber;
	pending: z.ZodNumber;
	suites: z.ZodNumber;
	tests: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	pending: number;
	failures: number;
	passes: number;
	suites: number;
	tests: number;
	duration: number;
	end: string;
	start: string;
}, {
	pending: number;
	failures: number;
	passes: number;
	suites: number;
	tests: number;
	duration: number;
	end: string;
	start: string;
}>>;
export declare const testRunnerMochaReporterStats_v1Example: z.infer<typeof testRunnerMochaReporterStats_v1>;
export declare const testRunnerPlatform_v1: z.ZodObject<{
	browserName: z.ZodString;
	browserVersion: z.ZodString;
	osCpus: z.ZodArray<z.ZodUnknown, "many">;
	osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
	osName: z.ZodString;
	osVersion: z.ZodString;
}, "strip", z.ZodTypeAny, {
	browserName: string;
	browserVersion: string;
	osCpus: unknown[];
	osMemory: Record<string, unknown> | null;
	osName: string;
	osVersion: string;
}, {
	browserName: string;
	browserVersion: string;
	osCpus: unknown[];
	osMemory: Record<string, unknown> | null;
	osName: string;
	osVersion: string;
}>;
declare const testRunnerPlatform_v1Strict: z.ZodObject<{
	browserName: z.ZodString;
	browserVersion: z.ZodString;
	osCpus: z.ZodArray<z.ZodUnknown, "many">;
	osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
	osName: z.ZodString;
	osVersion: z.ZodString;
}, "strict", z.ZodTypeAny, {
	browserName: string;
	browserVersion: string;
	osCpus: unknown[];
	osMemory: Record<string, unknown> | null;
	osName: string;
	osVersion: string;
}, {
	browserName: string;
	browserVersion: string;
	osCpus: unknown[];
	osMemory: Record<string, unknown> | null;
	osName: string;
	osVersion: string;
}>;
export declare const testRunnerPlatform_v1Example: z.infer<typeof testRunnerPlatform_v1Strict>;
export declare const testRunnerScreenshot_v1: z.ZodObject<{
	clientId: z.ZodString;
	height: z.ZodNumber;
	testId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	testTitle: z.ZodString;
	title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	width: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	clientId: string;
	height: number;
	testTitle: string;
	width: number;
	testId?: string | null | undefined;
	title?: string | null | undefined;
}, {
	clientId: string;
	height: number;
	testTitle: string;
	width: number;
	testId?: string | null | undefined;
	title?: string | null | undefined;
}>;
declare const testRunnerScreenshot_v1Strict: z.ZodObject<{
	clientId: z.ZodString;
	height: z.ZodNumber;
	testId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	testTitle: z.ZodString;
	title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	width: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
	clientId: string;
	height: number;
	testTitle: string;
	width: number;
	testId?: string | null | undefined;
	title?: string | null | undefined;
}, {
	clientId: string;
	height: number;
	testTitle: string;
	width: number;
	testId?: string | null | undefined;
	title?: string | null | undefined;
}>;
export declare const testRunnerScreenshot_v1Example: z.infer<typeof testRunnerScreenshot_v1Strict>;
export declare const testRunnerScreenshot_v2: z.ZodObject<{
	height: z.ZodNumber;
	name: z.ZodNullable<z.ZodString>;
	screenshotId: z.ZodString;
	takenAt: z.ZodString;
	testId: z.ZodString;
	width: z.ZodNumber;
	testAttemptIndex: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
	height: number;
	testId: string;
	width: number;
	name: string | null;
	screenshotId: string;
	takenAt: string;
	testAttemptIndex?: number | undefined;
}, {
	height: number;
	testId: string;
	width: number;
	name: string | null;
	screenshotId: string;
	takenAt: string;
	testAttemptIndex?: number | undefined;
}>;
export type TestRunnerScreenshot_v2Type = z.infer<typeof testRunnerScreenshot_v2>;
declare const testRunnerScreenshot_v2Strict: z.ZodObject<{
	height: z.ZodNumber;
	name: z.ZodNullable<z.ZodString>;
	screenshotId: z.ZodString;
	takenAt: z.ZodString;
	testId: z.ZodString;
	width: z.ZodNumber;
	testAttemptIndex: z.ZodOptional<z.ZodNumber>;
}, "strict", z.ZodTypeAny, {
	height: number;
	testId: string;
	width: number;
	name: string | null;
	screenshotId: string;
	takenAt: string;
	testAttemptIndex?: number | undefined;
}, {
	height: number;
	testId: string;
	width: number;
	name: string | null;
	screenshotId: string;
	takenAt: string;
	testAttemptIndex?: number | undefined;
}>;
export declare const testRunnerScreenshot_v2Example: z.infer<typeof testRunnerScreenshot_v2Strict>;
export declare const testRunnerStudioMetaData_v1: z.ZodObject<{
	studioCreated: z.ZodNullable<z.ZodNumber>;
	studioExtended: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
	studioCreated: number | null;
	studioExtended: number | null;
}, {
	studioCreated: number | null;
	studioExtended: number | null;
}>;
declare const testRunnerStudioMetaData_v1Strict: z.ZodObject<{
	studioCreated: z.ZodNullable<z.ZodNumber>;
	studioExtended: z.ZodNullable<z.ZodNumber>;
}, "strict", z.ZodTypeAny, {
	studioCreated: number | null;
	studioExtended: number | null;
}, {
	studioCreated: number | null;
	studioExtended: number | null;
}>;
export declare const testRunnerStudioMetaData_v1Example: z.infer<typeof testRunnerStudioMetaData_v1Strict>;
export declare const testRunnerTest_v1: z.ZodObject<{
	body: z.ZodNullable<z.ZodString>;
	error: z.ZodNullable<z.ZodString>;
	failedFromHookId: z.ZodNullable<z.ZodString>;
	stack: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
	testId: z.ZodString;
	timings: z.ZodNullable<z.ZodObject<{
		test: z.ZodOptional<z.ZodObject<{
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			fnDuration: number;
			afterFnDuration: number;
		}, {
			fnDuration: number;
			afterFnDuration: number;
		}>>;
		lifecycle: z.ZodOptional<z.ZodNumber>;
		"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
	}, "strip", z.ZodTypeAny, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}>>;
	title: z.ZodArray<z.ZodString, "many">;
	videoTimestamp: z.ZodNullable<z.ZodNumber>;
	wallClockDuration: z.ZodNullable<z.ZodNumber>;
	wallClockStartedAt: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: string | null;
	testId: string;
	title: string[];
	stack: string | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
	body: string | null;
}, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: string | null;
	testId: string;
	title: string[];
	stack: string | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
	body: string | null;
}>;
declare const testRunnerTest_v1Strict: z.ZodObject<{
	body: z.ZodNullable<z.ZodString>;
	error: z.ZodNullable<z.ZodString>;
	failedFromHookId: z.ZodNullable<z.ZodString>;
	stack: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
	testId: z.ZodString;
	timings: z.ZodNullable<z.ZodObject<{
		test: z.ZodOptional<z.ZodObject<{
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			fnDuration: number;
			afterFnDuration: number;
		}, {
			fnDuration: number;
			afterFnDuration: number;
		}>>;
		lifecycle: z.ZodOptional<z.ZodNumber>;
		"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
	}, "strip", z.ZodTypeAny, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}>>;
	title: z.ZodArray<z.ZodString, "many">;
	videoTimestamp: z.ZodNullable<z.ZodNumber>;
	wallClockDuration: z.ZodNullable<z.ZodNumber>;
	wallClockStartedAt: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: string | null;
	testId: string;
	title: string[];
	stack: string | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
	body: string | null;
}, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: string | null;
	testId: string;
	title: string[];
	stack: string | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
	body: string | null;
}>;
export declare const testRunnerTest_v1Example: z.infer<typeof testRunnerTest_v1Strict>;
export declare const testRunnerTest_v2: z.ZodObject<{
	attempts: z.ZodArray<z.ZodObject<{
		error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
			codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
				absoluteFile: z.ZodNullable<z.ZodString>;
				column: z.ZodNullable<z.ZodNumber>;
				frame: z.ZodNullable<z.ZodString>;
				language: z.ZodNullable<z.ZodString>;
				line: z.ZodNullable<z.ZodNumber>;
				originalFile: z.ZodNullable<z.ZodString>;
				relativeFile: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}>>>;
			message: z.ZodNullable<z.ZodString>;
			name: z.ZodNullable<z.ZodString>;
			stack: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}>>>;
		failedFromHookId: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		timings: z.ZodNullable<z.ZodObject<{
			test: z.ZodOptional<z.ZodObject<{
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				fnDuration: number;
				afterFnDuration: number;
			}, {
				fnDuration: number;
				afterFnDuration: number;
			}>>;
			lifecycle: z.ZodOptional<z.ZodNumber>;
			"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
		}, "strip", z.ZodTypeAny, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}>>;
		videoTimestamp: z.ZodNullable<z.ZodNumber>;
		wallClockDuration: z.ZodNullable<z.ZodNumber>;
		wallClockStartedAt: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}>, "many">;
	body: z.ZodNullable<z.ZodString>;
	displayError: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
	testId: z.ZodString;
	title: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
	testId: string;
	title: string[];
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
	body: string | null;
}, {
	testId: string;
	title: string[];
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
	body: string | null;
}>;
declare const testRunnerTest_v2Strict: z.ZodObject<{
	attempts: z.ZodArray<z.ZodObject<{
		error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
			codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
				absoluteFile: z.ZodNullable<z.ZodString>;
				column: z.ZodNullable<z.ZodNumber>;
				frame: z.ZodNullable<z.ZodString>;
				language: z.ZodNullable<z.ZodString>;
				line: z.ZodNullable<z.ZodNumber>;
				originalFile: z.ZodNullable<z.ZodString>;
				relativeFile: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}>>>;
			message: z.ZodNullable<z.ZodString>;
			name: z.ZodNullable<z.ZodString>;
			stack: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}>>>;
		failedFromHookId: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		timings: z.ZodNullable<z.ZodObject<{
			test: z.ZodOptional<z.ZodObject<{
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				fnDuration: number;
				afterFnDuration: number;
			}, {
				fnDuration: number;
				afterFnDuration: number;
			}>>;
			lifecycle: z.ZodOptional<z.ZodNumber>;
			"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
		}, "strip", z.ZodTypeAny, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}>>;
		videoTimestamp: z.ZodNullable<z.ZodNumber>;
		wallClockDuration: z.ZodNullable<z.ZodNumber>;
		wallClockStartedAt: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}>, "many">;
	body: z.ZodNullable<z.ZodString>;
	displayError: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
	testId: z.ZodString;
	title: z.ZodArray<z.ZodString, "many">;
}, "strict", z.ZodTypeAny, {
	testId: string;
	title: string[];
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
	body: string | null;
}, {
	testId: string;
	title: string[];
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
	body: string | null;
}>;
export declare const testRunnerTest_v2Example: z.infer<typeof testRunnerTest_v2Strict>;
export declare const testRunnerTestAttempt_v1: z.ZodObject<{
	error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
			absoluteFile: z.ZodNullable<z.ZodString>;
			column: z.ZodNullable<z.ZodNumber>;
			frame: z.ZodNullable<z.ZodString>;
			language: z.ZodNullable<z.ZodString>;
			line: z.ZodNullable<z.ZodNumber>;
			originalFile: z.ZodNullable<z.ZodString>;
			relativeFile: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		}, {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		}>>>;
		message: z.ZodNullable<z.ZodString>;
		name: z.ZodNullable<z.ZodString>;
		stack: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}, {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}>>>;
	failedFromHookId: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
	timings: z.ZodNullable<z.ZodObject<{
		test: z.ZodOptional<z.ZodObject<{
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			fnDuration: number;
			afterFnDuration: number;
		}, {
			fnDuration: number;
			afterFnDuration: number;
		}>>;
		lifecycle: z.ZodOptional<z.ZodNumber>;
		"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
	}, "strip", z.ZodTypeAny, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}>>;
	videoTimestamp: z.ZodNullable<z.ZodNumber>;
	wallClockDuration: z.ZodNullable<z.ZodNumber>;
	wallClockStartedAt: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: (Record<string, unknown> & {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}) | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
}, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: (Record<string, unknown> & {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}) | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
}>;
export type TestRunnerTestAttempt_v1Type = z.infer<typeof testRunnerTestAttempt_v1>;
declare const testRunnerTestAttempt_v1Strict: z.ZodObject<{
	error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
			absoluteFile: z.ZodNullable<z.ZodString>;
			column: z.ZodNullable<z.ZodNumber>;
			frame: z.ZodNullable<z.ZodString>;
			language: z.ZodNullable<z.ZodString>;
			line: z.ZodNullable<z.ZodNumber>;
			originalFile: z.ZodNullable<z.ZodString>;
			relativeFile: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		}, {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		}>>>;
		message: z.ZodNullable<z.ZodString>;
		name: z.ZodNullable<z.ZodString>;
		stack: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}, {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}>>>;
	failedFromHookId: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
	timings: z.ZodNullable<z.ZodObject<{
		test: z.ZodOptional<z.ZodObject<{
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			fnDuration: number;
			afterFnDuration: number;
		}, {
			fnDuration: number;
			afterFnDuration: number;
		}>>;
		lifecycle: z.ZodOptional<z.ZodNumber>;
		"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
		"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
			hookId: z.ZodString;
			fnDuration: z.ZodNumber;
			afterFnDuration: z.ZodNumber;
		}, "strip", z.ZodTypeAny, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}, {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}>, "many">>;
	}, "strip", z.ZodTypeAny, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}, {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	}>>;
	videoTimestamp: z.ZodNullable<z.ZodNumber>;
	wallClockDuration: z.ZodNullable<z.ZodNumber>;
	wallClockStartedAt: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: (Record<string, unknown> & {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}) | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
}, {
	wallClockDuration: number | null;
	wallClockStartedAt: string | null;
	error: (Record<string, unknown> & {
		message: string | null;
		name: string | null;
		stack: string | null;
		codeFrame?: {
			absoluteFile: string | null;
			column: number | null;
			frame: string | null;
			language: string | null;
			line: number | null;
			originalFile: string | null;
			relativeFile: string | null;
		} | null | undefined;
	}) | null;
	failedFromHookId: string | null;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	timings: {
		test?: {
			fnDuration: number;
			afterFnDuration: number;
		} | undefined;
		lifecycle?: number | undefined;
		"before each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"before all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after each"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
		"after all"?: {
			hookId: string;
			fnDuration: number;
			afterFnDuration: number;
		}[] | undefined;
	} | null;
	videoTimestamp: number | null;
}>;
export declare const testRunnerTestAttempt_v1Example: z.infer<typeof testRunnerTestAttempt_v1Strict>;
export declare const testRunnerTestError_v1: z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
	codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
		absoluteFile: z.ZodNullable<z.ZodString>;
		column: z.ZodNullable<z.ZodNumber>;
		frame: z.ZodNullable<z.ZodString>;
		language: z.ZodNullable<z.ZodString>;
		line: z.ZodNullable<z.ZodNumber>;
		originalFile: z.ZodNullable<z.ZodString>;
		relativeFile: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		absoluteFile: string | null;
		column: number | null;
		frame: string | null;
		language: string | null;
		line: number | null;
		originalFile: string | null;
		relativeFile: string | null;
	}, {
		absoluteFile: string | null;
		column: number | null;
		frame: string | null;
		language: string | null;
		line: number | null;
		originalFile: string | null;
		relativeFile: string | null;
	}>>>;
	message: z.ZodNullable<z.ZodString>;
	name: z.ZodNullable<z.ZodString>;
	stack: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	message: string | null;
	name: string | null;
	stack: string | null;
	codeFrame?: {
		absoluteFile: string | null;
		column: number | null;
		frame: string | null;
		language: string | null;
		line: number | null;
		originalFile: string | null;
		relativeFile: string | null;
	} | null | undefined;
}, {
	message: string | null;
	name: string | null;
	stack: string | null;
	codeFrame?: {
		absoluteFile: string | null;
		column: number | null;
		frame: string | null;
		language: string | null;
		line: number | null;
		originalFile: string | null;
		relativeFile: string | null;
	} | null | undefined;
}>>;
export declare const testRunnerTestError_v1Example: z.infer<typeof testRunnerTestError_v1>;
export declare const testRunnerTestInfo_v1: z.ZodObject<{
	body: z.ZodNullable<z.ZodString>;
	clientId: z.ZodString;
	config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	hookIds: z.ZodArray<z.ZodString, "many">;
	title: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
	clientId: string;
	title: string[];
	body: string | null;
	config: Record<string, unknown>;
	hookIds: string[];
}, {
	clientId: string;
	title: string[];
	body: string | null;
	config: Record<string, unknown>;
	hookIds: string[];
}>;
export type TestRunnerTestInfo_v1Type = z.infer<typeof testRunnerTestInfo_v1>;
declare const testRunnerTestInfo_v1Strict: z.ZodObject<{
	body: z.ZodNullable<z.ZodString>;
	clientId: z.ZodString;
	config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	hookIds: z.ZodArray<z.ZodString, "many">;
	title: z.ZodArray<z.ZodString, "many">;
}, "strict", z.ZodTypeAny, {
	clientId: string;
	title: string[];
	body: string | null;
	config: Record<string, unknown>;
	hookIds: string[];
}, {
	clientId: string;
	title: string[];
	body: string | null;
	config: Record<string, unknown>;
	hookIds: string[];
}>;
export declare const testRunnerTestInfo_v1Example: z.infer<typeof testRunnerTestInfo_v1Strict>;
export declare const testRunnerTestResult_v1: z.ZodObject<{
	attempts: z.ZodArray<z.ZodObject<{
		error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
			codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
				absoluteFile: z.ZodNullable<z.ZodString>;
				column: z.ZodNullable<z.ZodNumber>;
				frame: z.ZodNullable<z.ZodString>;
				language: z.ZodNullable<z.ZodString>;
				line: z.ZodNullable<z.ZodNumber>;
				originalFile: z.ZodNullable<z.ZodString>;
				relativeFile: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}>>>;
			message: z.ZodNullable<z.ZodString>;
			name: z.ZodNullable<z.ZodString>;
			stack: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}>>>;
		failedFromHookId: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		timings: z.ZodNullable<z.ZodObject<{
			test: z.ZodOptional<z.ZodObject<{
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				fnDuration: number;
				afterFnDuration: number;
			}, {
				fnDuration: number;
				afterFnDuration: number;
			}>>;
			lifecycle: z.ZodOptional<z.ZodNumber>;
			"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
		}, "strip", z.ZodTypeAny, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}>>;
		videoTimestamp: z.ZodNullable<z.ZodNumber>;
		wallClockDuration: z.ZodNullable<z.ZodNumber>;
		wallClockStartedAt: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}>, "many">;
	clientId: z.ZodString;
	displayError: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
}, "strip", z.ZodTypeAny, {
	clientId: string;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
}, {
	clientId: string;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
}>;
declare const testRunnerTestResult_v1Strict: z.ZodObject<{
	attempts: z.ZodArray<z.ZodObject<{
		error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
			codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
				absoluteFile: z.ZodNullable<z.ZodString>;
				column: z.ZodNullable<z.ZodNumber>;
				frame: z.ZodNullable<z.ZodString>;
				language: z.ZodNullable<z.ZodString>;
				line: z.ZodNullable<z.ZodNumber>;
				originalFile: z.ZodNullable<z.ZodString>;
				relativeFile: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}, {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			}>>>;
			message: z.ZodNullable<z.ZodString>;
			name: z.ZodNullable<z.ZodString>;
			stack: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}, {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}>>>;
		failedFromHookId: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		timings: z.ZodNullable<z.ZodObject<{
			test: z.ZodOptional<z.ZodObject<{
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				fnDuration: number;
				afterFnDuration: number;
			}, {
				fnDuration: number;
				afterFnDuration: number;
			}>>;
			lifecycle: z.ZodOptional<z.ZodNumber>;
			"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
		}, "strip", z.ZodTypeAny, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}>>;
		videoTimestamp: z.ZodNullable<z.ZodNumber>;
		wallClockDuration: z.ZodNullable<z.ZodNumber>;
		wallClockStartedAt: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}>, "many">;
	clientId: z.ZodString;
	displayError: z.ZodNullable<z.ZodString>;
	state: z.ZodEnum<[
		"passed",
		"pending",
		"skipped",
		"failed",
		"running",
		"cancelled",
		"errored",
		"timedOut"
	]>;
}, "strict", z.ZodTypeAny, {
	clientId: string;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
}, {
	clientId: string;
	state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
	attempts: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: (Record<string, unknown> & {
			message: string | null;
			name: string | null;
			stack: string | null;
			codeFrame?: {
				absoluteFile: string | null;
				column: number | null;
				frame: string | null;
				language: string | null;
				line: number | null;
				originalFile: string | null;
				relativeFile: string | null;
			} | null | undefined;
		}) | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
	}[];
	displayError: string | null;
}>;
export declare const testRunnerTestResult_v1Example: z.infer<typeof testRunnerTestResult_v1Strict>;
export declare const testRunnerTimings_v1: z.ZodObject<{
	test: z.ZodOptional<z.ZodObject<{
		fnDuration: z.ZodNumber;
		afterFnDuration: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		fnDuration: number;
		afterFnDuration: number;
	}, {
		fnDuration: number;
		afterFnDuration: number;
	}>>;
	lifecycle: z.ZodOptional<z.ZodNumber>;
	"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
		hookId: z.ZodString;
		fnDuration: z.ZodNumber;
		afterFnDuration: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}>, "many">>;
	"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
		hookId: z.ZodString;
		fnDuration: z.ZodNumber;
		afterFnDuration: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}>, "many">>;
	"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
		hookId: z.ZodString;
		fnDuration: z.ZodNumber;
		afterFnDuration: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}>, "many">>;
	"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
		hookId: z.ZodString;
		fnDuration: z.ZodNumber;
		afterFnDuration: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}, {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}>, "many">>;
}, "strip", z.ZodTypeAny, {
	test?: {
		fnDuration: number;
		afterFnDuration: number;
	} | undefined;
	lifecycle?: number | undefined;
	"before each"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
	"before all"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
	"after each"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
	"after all"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
}, {
	test?: {
		fnDuration: number;
		afterFnDuration: number;
	} | undefined;
	lifecycle?: number | undefined;
	"before each"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
	"before all"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
	"after each"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
	"after all"?: {
		hookId: string;
		fnDuration: number;
		afterFnDuration: number;
	}[] | undefined;
}>;
export declare const testRunnerTimings_v1Example: z.infer<typeof testRunnerTimings_v1>;
export declare const testRunnerWarning_v1: z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
	code: z.ZodString;
	message: z.ZodString;
	name: z.ZodString;
}, "strip", z.ZodTypeAny, {
	code: string;
	message: string;
	name: string;
}, {
	code: string;
	message: string;
	name: string;
}>>;
export declare const testRunnerWarning_v1Example: z.infer<typeof testRunnerWarning_v1>;
export declare const postInstanceResultsRequest_v1: z.ZodObject<{
	screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
		height: z.ZodNumber;
		name: z.ZodNullable<z.ZodString>;
		screenshotId: z.ZodString;
		takenAt: z.ZodString;
		testId: z.ZodString;
		width: z.ZodNumber;
		testAttemptIndex: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}>, "many">>;
	video: z.ZodBoolean;
	reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		duration: z.ZodNumber;
		end: z.ZodString;
		start: z.ZodString;
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}>>>;
	stats: z.ZodObject<{
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		skipped: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
		wallClockDuration: z.ZodNumber;
		wallClockEndedAt: z.ZodString;
		wallClockStartedAt: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}>;
	exception: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	tests: z.ZodArray<z.ZodObject<{
		attempts: z.ZodArray<z.ZodObject<{
			error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
				codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
					absoluteFile: z.ZodNullable<z.ZodString>;
					column: z.ZodNullable<z.ZodNumber>;
					frame: z.ZodNullable<z.ZodString>;
					language: z.ZodNullable<z.ZodString>;
					line: z.ZodNullable<z.ZodNumber>;
					originalFile: z.ZodNullable<z.ZodString>;
					relativeFile: z.ZodNullable<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}>>>;
				message: z.ZodNullable<z.ZodString>;
				name: z.ZodNullable<z.ZodString>;
				stack: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}>>>;
			failedFromHookId: z.ZodNullable<z.ZodString>;
			state: z.ZodEnum<[
				"passed",
				"pending",
				"skipped",
				"failed",
				"running",
				"cancelled",
				"errored",
				"timedOut"
			]>;
			timings: z.ZodNullable<z.ZodObject<{
				test: z.ZodOptional<z.ZodObject<{
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					fnDuration: number;
					afterFnDuration: number;
				}, {
					fnDuration: number;
					afterFnDuration: number;
				}>>;
				lifecycle: z.ZodOptional<z.ZodNumber>;
				"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
			}, "strip", z.ZodTypeAny, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}>>;
			videoTimestamp: z.ZodNullable<z.ZodNumber>;
			wallClockDuration: z.ZodNullable<z.ZodNumber>;
			wallClockStartedAt: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}>, "many">;
		clientId: z.ZodString;
		displayError: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}, {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}>, "many">;
	metadata: z.ZodOptional<z.ZodNullable<z.ZodObject<{
		studioCreated: z.ZodNullable<z.ZodNumber>;
		studioExtended: z.ZodNullable<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		studioCreated: number | null;
		studioExtended: number | null;
	}, {
		studioCreated: number | null;
		studioExtended: number | null;
	}>>>;
}, "strip", z.ZodTypeAny, {
	tests: {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}[];
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
	exception?: string | null | undefined;
	metadata?: {
		studioCreated: number | null;
		studioExtended: number | null;
	} | null | undefined;
}, {
	tests: {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}[];
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
	exception?: string | null | undefined;
	metadata?: {
		studioCreated: number | null;
		studioExtended: number | null;
	} | null | undefined;
}>;
export type PostInstanceResultsRequest_v1Type = z.infer<typeof postInstanceResultsRequest_v1>;
declare const postInstanceResultsRequest_v1Strict: z.ZodObject<{
	screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
		height: z.ZodNumber;
		name: z.ZodNullable<z.ZodString>;
		screenshotId: z.ZodString;
		takenAt: z.ZodString;
		testId: z.ZodString;
		width: z.ZodNumber;
		testAttemptIndex: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}>, "many">>;
	video: z.ZodBoolean;
	reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		duration: z.ZodNumber;
		end: z.ZodString;
		start: z.ZodString;
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}>>>;
	stats: z.ZodObject<{
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		skipped: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
		wallClockDuration: z.ZodNumber;
		wallClockEndedAt: z.ZodString;
		wallClockStartedAt: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}>;
	exception: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	tests: z.ZodArray<z.ZodObject<{
		attempts: z.ZodArray<z.ZodObject<{
			error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
				codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
					absoluteFile: z.ZodNullable<z.ZodString>;
					column: z.ZodNullable<z.ZodNumber>;
					frame: z.ZodNullable<z.ZodString>;
					language: z.ZodNullable<z.ZodString>;
					line: z.ZodNullable<z.ZodNumber>;
					originalFile: z.ZodNullable<z.ZodString>;
					relativeFile: z.ZodNullable<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}>>>;
				message: z.ZodNullable<z.ZodString>;
				name: z.ZodNullable<z.ZodString>;
				stack: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}>>>;
			failedFromHookId: z.ZodNullable<z.ZodString>;
			state: z.ZodEnum<[
				"passed",
				"pending",
				"skipped",
				"failed",
				"running",
				"cancelled",
				"errored",
				"timedOut"
			]>;
			timings: z.ZodNullable<z.ZodObject<{
				test: z.ZodOptional<z.ZodObject<{
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					fnDuration: number;
					afterFnDuration: number;
				}, {
					fnDuration: number;
					afterFnDuration: number;
				}>>;
				lifecycle: z.ZodOptional<z.ZodNumber>;
				"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
			}, "strip", z.ZodTypeAny, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}>>;
			videoTimestamp: z.ZodNullable<z.ZodNumber>;
			wallClockDuration: z.ZodNullable<z.ZodNumber>;
			wallClockStartedAt: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}>, "many">;
		clientId: z.ZodString;
		displayError: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}, {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}>, "many">;
	metadata: z.ZodOptional<z.ZodNullable<z.ZodObject<{
		studioCreated: z.ZodNullable<z.ZodNumber>;
		studioExtended: z.ZodNullable<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		studioCreated: number | null;
		studioExtended: number | null;
	}, {
		studioCreated: number | null;
		studioExtended: number | null;
	}>>>;
}, "strict", z.ZodTypeAny, {
	tests: {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}[];
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
	exception?: string | null | undefined;
	metadata?: {
		studioCreated: number | null;
		studioExtended: number | null;
	} | null | undefined;
}, {
	tests: {
		clientId: string;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
	}[];
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
	exception?: string | null | undefined;
	metadata?: {
		studioCreated: number | null;
		studioExtended: number | null;
	} | null | undefined;
}>;
export declare const postInstanceResultsRequest_v1Example: z.infer<typeof postInstanceResultsRequest_v1Strict>;
export declare const postInstanceResultsResponse_v1: z.ZodObject<{
	screenshotUploadUrls: z.ZodArray<z.ZodObject<{
		screenshotId: z.ZodString;
		uploadUrl: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		screenshotId: string;
		uploadUrl: string;
	}, {
		screenshotId: string;
		uploadUrl: string;
	}>, "many">;
	videoUploadUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}>;
export type PostInstanceResultsResponse_v1Type = z.infer<typeof postInstanceResultsResponse_v1>;
declare const postInstanceResultsResponse_v1Strict: z.ZodObject<{
	screenshotUploadUrls: z.ZodArray<z.ZodObject<{
		screenshotId: z.ZodString;
		uploadUrl: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		screenshotId: string;
		uploadUrl: string;
	}, {
		screenshotId: string;
		uploadUrl: string;
	}>, "many">;
	videoUploadUrl: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}>;
export declare const postInstanceResultsResponse_v1Example: z.infer<typeof postInstanceResultsResponse_v1Strict>;
export declare const postInstanceTestsRequest_v1: z.ZodObject<{
	config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	hooks: z.ZodArray<z.ZodObject<{
		body: z.ZodString;
		clientId: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
		type: z.ZodEnum<[
			"before each",
			"before all",
			"after each",
			"after all"
		]>;
	}, "strip", z.ZodTypeAny, {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}, {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}>, "many">;
	tests: z.ZodArray<z.ZodObject<{
		body: z.ZodNullable<z.ZodString>;
		clientId: z.ZodString;
		config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
		hookIds: z.ZodArray<z.ZodString, "many">;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}, {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}>, "many">;
}, "strip", z.ZodTypeAny, {
	tests: {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}[];
	hooks: {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}[];
	config: Record<string, unknown>;
}, {
	tests: {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}[];
	hooks: {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}[];
	config: Record<string, unknown>;
}>;
export type PostInstanceTestsRequest_v1Type = z.infer<typeof postInstanceTestsRequest_v1>;
declare const postInstanceTestsRequest_v1Strict: z.ZodObject<{
	config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	hooks: z.ZodArray<z.ZodObject<{
		body: z.ZodString;
		clientId: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
		type: z.ZodEnum<[
			"before each",
			"before all",
			"after each",
			"after all"
		]>;
	}, "strip", z.ZodTypeAny, {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}, {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}>, "many">;
	tests: z.ZodArray<z.ZodObject<{
		body: z.ZodNullable<z.ZodString>;
		clientId: z.ZodString;
		config: z.ZodRecord<z.ZodString, z.ZodUnknown>;
		hookIds: z.ZodArray<z.ZodString, "many">;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}, {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}>, "many">;
}, "strict", z.ZodTypeAny, {
	tests: {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}[];
	hooks: {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}[];
	config: Record<string, unknown>;
}, {
	tests: {
		clientId: string;
		title: string[];
		body: string | null;
		config: Record<string, unknown>;
		hookIds: string[];
	}[];
	hooks: {
		type: "before each" | "before all" | "after each" | "after all";
		clientId: string;
		title: string[];
		body: string;
	}[];
	config: Record<string, unknown>;
}>;
export declare const postInstanceTestsRequest_v1Example: z.infer<typeof postInstanceTestsRequest_v1Strict>;
export declare const postInstanceTestsResponse_v1: z.ZodObject<{
	actions: z.ZodNullable<z.ZodArray<z.ZodObject<{
		action: z.ZodEnum<[
			"SKIP",
			"MUTE",
			"BURN_IN"
		]>;
		clientId: z.ZodNullable<z.ZodString>;
		payload: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		type: z.ZodEnum<[
			"SPEC",
			"TEST"
		]>;
	}, "strip", z.ZodTypeAny, {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}, {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}>, "many">>;
	claimedInstances: z.ZodNumber;
	estimatedWallClockDuration: z.ZodNullable<z.ZodNumber>;
	instanceId: z.ZodNullable<z.ZodString>;
	spec: z.ZodNullable<z.ZodString>;
	totalInstances: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	spec: string | null;
	actions: {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}[] | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}, {
	spec: string | null;
	actions: {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}[] | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}>;
export type PostInstanceTestsResponse_v1Type = z.infer<typeof postInstanceTestsResponse_v1>;
declare const postInstanceTestsResponse_v1Strict: z.ZodObject<{
	actions: z.ZodNullable<z.ZodArray<z.ZodObject<{
		action: z.ZodEnum<[
			"SKIP",
			"MUTE",
			"BURN_IN"
		]>;
		clientId: z.ZodNullable<z.ZodString>;
		payload: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		type: z.ZodEnum<[
			"SPEC",
			"TEST"
		]>;
	}, "strip", z.ZodTypeAny, {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}, {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}>, "many">>;
	claimedInstances: z.ZodNumber;
	estimatedWallClockDuration: z.ZodNullable<z.ZodNumber>;
	instanceId: z.ZodNullable<z.ZodString>;
	spec: z.ZodNullable<z.ZodString>;
	totalInstances: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
	spec: string | null;
	actions: {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}[] | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}, {
	spec: string | null;
	actions: {
		type: "SPEC" | "TEST";
		clientId: string | null;
		action: "SKIP" | "MUTE" | "BURN_IN";
		payload: Record<string, unknown> | null;
	}[] | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}>;
export declare const postInstanceTestsResponse_v1Example: z.infer<typeof postInstanceTestsResponse_v1Strict>;
export declare const postRunInstanceRequest_v1: z.ZodObject<{
	browserName: z.ZodString;
	browserVersion: z.ZodString;
	osCpus: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
	osMemory: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
	osName: z.ZodString;
	osVersion: z.ZodString;
	spec: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
	browserName: string;
	browserVersion: string;
	osName: string;
	osVersion: string;
	osCpus?: unknown[] | undefined;
	osMemory?: Record<string, unknown> | null | undefined;
	spec?: string | null | undefined;
}, {
	browserName: string;
	browserVersion: string;
	osName: string;
	osVersion: string;
	osCpus?: unknown[] | undefined;
	osMemory?: Record<string, unknown> | null | undefined;
	spec?: string | null | undefined;
}>;
declare const postRunInstanceRequest_v1Strict: z.ZodObject<{
	browserName: z.ZodString;
	browserVersion: z.ZodString;
	osCpus: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
	osMemory: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
	osName: z.ZodString;
	osVersion: z.ZodString;
	spec: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strict", z.ZodTypeAny, {
	browserName: string;
	browserVersion: string;
	osName: string;
	osVersion: string;
	osCpus?: unknown[] | undefined;
	osMemory?: Record<string, unknown> | null | undefined;
	spec?: string | null | undefined;
}, {
	browserName: string;
	browserVersion: string;
	osName: string;
	osVersion: string;
	osCpus?: unknown[] | undefined;
	osMemory?: Record<string, unknown> | null | undefined;
	spec?: string | null | undefined;
}>;
export declare const postRunInstanceRequest_v1Example: z.infer<typeof postRunInstanceRequest_v1Strict>;
export declare const postRunInstanceRequest_v2: z.ZodObject<{
	groupId: z.ZodString;
	machineId: z.ZodString;
	platform: z.ZodObject<{
		browserName: z.ZodString;
		browserVersion: z.ZodString;
		osCpus: z.ZodArray<z.ZodUnknown, "many">;
		osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		osName: z.ZodString;
		osVersion: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}>;
	spec: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	spec: string | null;
	groupId: string;
	machineId: string;
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
}, {
	spec: string | null;
	groupId: string;
	machineId: string;
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
}>;
export type PostRunInstanceRequest_v2Type = z.infer<typeof postRunInstanceRequest_v2>;
declare const postRunInstanceRequest_v2Strict: z.ZodObject<{
	groupId: z.ZodString;
	machineId: z.ZodString;
	platform: z.ZodObject<{
		browserName: z.ZodString;
		browserVersion: z.ZodString;
		osCpus: z.ZodArray<z.ZodUnknown, "many">;
		osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		osName: z.ZodString;
		osVersion: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}>;
	spec: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	spec: string | null;
	groupId: string;
	machineId: string;
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
}, {
	spec: string | null;
	groupId: string;
	machineId: string;
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
}>;
export declare const postRunInstanceRequest_v2Example: z.infer<typeof postRunInstanceRequest_v2Strict>;
export declare const postRunInstanceResponse_v1: z.ZodObject<{
	instanceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
	instanceId: string;
}, {
	instanceId: string;
}>;
declare const postRunInstanceResponse_v1Strict: z.ZodObject<{
	instanceId: z.ZodString;
}, "strict", z.ZodTypeAny, {
	instanceId: string;
}, {
	instanceId: string;
}>;
export declare const postRunInstanceResponse_v1Example: z.infer<typeof postRunInstanceResponse_v1Strict>;
export declare const postRunInstanceResponse_v2: z.ZodObject<{
	claimedInstances: z.ZodNumber;
	estimatedWallClockDuration: z.ZodNullable<z.ZodNumber>;
	instanceId: z.ZodNullable<z.ZodString>;
	spec: z.ZodNullable<z.ZodString>;
	totalInstances: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	spec: string | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}, {
	spec: string | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}>;
export type PostRunInstanceResponse_v2 = z.infer<typeof postRunInstanceResponse_v2>;
declare const postRunInstanceResponse_v2Strict: z.ZodObject<{
	claimedInstances: z.ZodNumber;
	estimatedWallClockDuration: z.ZodNullable<z.ZodNumber>;
	instanceId: z.ZodNullable<z.ZodString>;
	spec: z.ZodNullable<z.ZodString>;
	totalInstances: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
	spec: string | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}, {
	spec: string | null;
	claimedInstances: number;
	estimatedWallClockDuration: number | null;
	instanceId: string | null;
	totalInstances: number;
}>;
export declare const postRunInstanceResponse_v2Example: z.infer<typeof postRunInstanceResponse_v2Strict>;
export declare const postRunRequest_v1: z.ZodObject<{
	projectId: z.ZodString;
	ciBuildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	ciParams: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
	ciProvider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitAuthor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitAuthorEmail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitAuthorName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitBranch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitSha: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	groupId: z.ZodOptional<z.ZodNullable<z.ZodUnion<[
		z.ZodString,
		z.ZodNumber
	]>>>;
	recordKey: z.ZodString;
	remoteOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	specPattern: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	specs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
	projectId: string;
	recordKey: string;
	ciBuildNumber?: string | null | undefined;
	ciParams?: Record<string, any> | null | undefined;
	ciProvider?: string | null | undefined;
	commitAuthor?: string | null | undefined;
	commitAuthorEmail?: string | null | undefined;
	commitAuthorName?: string | null | undefined;
	commitBranch?: string | null | undefined;
	commitMessage?: string | null | undefined;
	commitSha?: string | null | undefined;
	groupId?: string | number | null | undefined;
	remoteOrigin?: string | null | undefined;
	specPattern?: string | null | undefined;
	specs?: string[] | null | undefined;
}, {
	projectId: string;
	recordKey: string;
	ciBuildNumber?: string | null | undefined;
	ciParams?: Record<string, any> | null | undefined;
	ciProvider?: string | null | undefined;
	commitAuthor?: string | null | undefined;
	commitAuthorEmail?: string | null | undefined;
	commitAuthorName?: string | null | undefined;
	commitBranch?: string | null | undefined;
	commitMessage?: string | null | undefined;
	commitSha?: string | null | undefined;
	groupId?: string | number | null | undefined;
	remoteOrigin?: string | null | undefined;
	specPattern?: string | null | undefined;
	specs?: string[] | null | undefined;
}>;
declare const postRunRequest_v1Strict: z.ZodObject<{
	projectId: z.ZodString;
	ciBuildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	ciParams: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
	ciProvider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitAuthor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitAuthorEmail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitAuthorName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitBranch: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	commitSha: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	groupId: z.ZodOptional<z.ZodNullable<z.ZodUnion<[
		z.ZodString,
		z.ZodNumber
	]>>>;
	recordKey: z.ZodString;
	remoteOrigin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	specPattern: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	specs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strict", z.ZodTypeAny, {
	projectId: string;
	recordKey: string;
	ciBuildNumber?: string | null | undefined;
	ciParams?: Record<string, any> | null | undefined;
	ciProvider?: string | null | undefined;
	commitAuthor?: string | null | undefined;
	commitAuthorEmail?: string | null | undefined;
	commitAuthorName?: string | null | undefined;
	commitBranch?: string | null | undefined;
	commitMessage?: string | null | undefined;
	commitSha?: string | null | undefined;
	groupId?: string | number | null | undefined;
	remoteOrigin?: string | null | undefined;
	specPattern?: string | null | undefined;
	specs?: string[] | null | undefined;
}, {
	projectId: string;
	recordKey: string;
	ciBuildNumber?: string | null | undefined;
	ciParams?: Record<string, any> | null | undefined;
	ciProvider?: string | null | undefined;
	commitAuthor?: string | null | undefined;
	commitAuthorEmail?: string | null | undefined;
	commitAuthorName?: string | null | undefined;
	commitBranch?: string | null | undefined;
	commitMessage?: string | null | undefined;
	commitSha?: string | null | undefined;
	groupId?: string | number | null | undefined;
	remoteOrigin?: string | null | undefined;
	specPattern?: string | null | undefined;
	specs?: string[] | null | undefined;
}>;
export type postRunRequest_v1StrictType = z.infer<typeof postRunRequest_v1Strict>;
export declare const postRunRequest_v1Example: postRunRequest_v1StrictType;
export declare const postRunRequest_v2: z.ZodObject<{
	ci: z.ZodNullable<z.ZodObject<{
		buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
		params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
		provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	}, "strip", z.ZodTypeAny, {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}, {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}>>;
	commit: z.ZodNullable<z.ZodObject<{
		authorEmail: z.ZodNullable<z.ZodString>;
		authorName: z.ZodNullable<z.ZodString>;
		branch: z.ZodNullable<z.ZodString>;
		message: z.ZodNullable<z.ZodString>;
		remoteOrigin: z.ZodNullable<z.ZodString>;
		sha: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	}, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	}>>;
	platform: z.ZodObject<{
		browserName: z.ZodString;
		browserVersion: z.ZodString;
		osCpus: z.ZodArray<z.ZodUnknown, "many">;
		osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		osName: z.ZodString;
		osVersion: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}>;
	projectId: z.ZodString;
	recordKey: z.ZodString;
	specPattern: z.ZodNullable<z.ZodString>;
	specs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	} | null;
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	} | null;
}, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	} | null;
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	} | null;
}>;
declare const postRunRequest_v2Strict: z.ZodObject<{
	ci: z.ZodNullable<z.ZodObject<{
		buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
		params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
		provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	}, "strip", z.ZodTypeAny, {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}, {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}>>;
	commit: z.ZodNullable<z.ZodObject<{
		authorEmail: z.ZodNullable<z.ZodString>;
		authorName: z.ZodNullable<z.ZodString>;
		branch: z.ZodNullable<z.ZodString>;
		message: z.ZodNullable<z.ZodString>;
		remoteOrigin: z.ZodNullable<z.ZodString>;
		sha: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	}, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	}>>;
	platform: z.ZodObject<{
		browserName: z.ZodString;
		browserVersion: z.ZodString;
		osCpus: z.ZodArray<z.ZodUnknown, "many">;
		osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		osName: z.ZodString;
		osVersion: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}>;
	projectId: z.ZodString;
	recordKey: z.ZodString;
	specPattern: z.ZodNullable<z.ZodString>;
	specs: z.ZodArray<z.ZodString, "many">;
}, "strict", z.ZodTypeAny, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	} | null;
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	} | null;
}, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		buildNumber?: string | null | undefined;
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	} | null;
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
	} | null;
}>;
export declare const postRunRequest_v2Example: z.infer<typeof postRunRequest_v2Strict>;
export declare const postRunRequest_v3: z.ZodObject<{
	platform: z.ZodObject<{
		browserName: z.ZodString;
		browserVersion: z.ZodString;
		osCpus: z.ZodArray<z.ZodUnknown, "many">;
		osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		osName: z.ZodString;
		osVersion: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}>;
	projectId: z.ZodString;
	recordKey: z.ZodString;
	specPattern: z.ZodNullable<z.ZodString>;
	specs: z.ZodArray<z.ZodString, "many">;
	ci: z.ZodObject<Omit<{
		buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
		params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
		provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	}, "buildNumber">, "strip", z.ZodTypeAny, {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}, {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}>;
	commit: z.ZodObject<{
		message: z.ZodNullable<z.ZodString>;
		authorEmail: z.ZodNullable<z.ZodString>;
		authorName: z.ZodNullable<z.ZodString>;
		branch: z.ZodNullable<z.ZodString>;
		remoteOrigin: z.ZodNullable<z.ZodString>;
		sha: z.ZodNullable<z.ZodString>;
		defaultBranch: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	}, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	}>;
	ciBuildId: z.ZodNullable<z.ZodUnion<[
		z.ZodString,
		z.ZodNumber
	]>>;
	group: z.ZodNullable<z.ZodString>;
	parallel: z.ZodNullable<z.ZodBoolean>;
	runnerCapabilities: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
	testingType: z.ZodOptional<z.ZodEnum<[
		"e2e",
		"component",
		"ct"
	]>>;
	tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
	autoCancelAfterFailures: z.ZodOptional<z.ZodUnion<[
		z.ZodNumber,
		z.ZodLiteral<false>
	]>>;
}, "strip", z.ZodTypeAny, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	};
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	};
	ciBuildId: string | number | null;
	group: string | null;
	parallel: boolean | null;
	runnerCapabilities?: Record<string, unknown> | undefined;
	testingType?: "e2e" | "component" | "ct" | undefined;
	tags?: string[] | undefined;
	autoCancelAfterFailures?: number | false | undefined;
}, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	};
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	};
	ciBuildId: string | number | null;
	group: string | null;
	parallel: boolean | null;
	runnerCapabilities?: Record<string, unknown> | undefined;
	testingType?: "e2e" | "component" | "ct" | undefined;
	tags?: string[] | undefined;
	autoCancelAfterFailures?: number | false | undefined;
}>;
export type PostRunRequest_v3Type = z.infer<typeof postRunRequest_v3>;
declare const postRunRequest_v3Strict: z.ZodObject<{
	platform: z.ZodObject<{
		browserName: z.ZodString;
		browserVersion: z.ZodString;
		osCpus: z.ZodArray<z.ZodUnknown, "many">;
		osMemory: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
		osName: z.ZodString;
		osVersion: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}, {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	}>;
	projectId: z.ZodString;
	recordKey: z.ZodString;
	specPattern: z.ZodNullable<z.ZodString>;
	specs: z.ZodArray<z.ZodString, "many">;
	ci: z.ZodObject<Omit<{
		buildNumber: z.ZodOptional<z.ZodNullable<z.ZodString>>;
		params: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
		provider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	}, "buildNumber">, "strip", z.ZodTypeAny, {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}, {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	}>;
	commit: z.ZodObject<{
		message: z.ZodNullable<z.ZodString>;
		authorEmail: z.ZodNullable<z.ZodString>;
		authorName: z.ZodNullable<z.ZodString>;
		branch: z.ZodNullable<z.ZodString>;
		remoteOrigin: z.ZodNullable<z.ZodString>;
		sha: z.ZodNullable<z.ZodString>;
		defaultBranch: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	}, {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	}>;
	ciBuildId: z.ZodNullable<z.ZodUnion<[
		z.ZodString,
		z.ZodNumber
	]>>;
	group: z.ZodNullable<z.ZodString>;
	parallel: z.ZodNullable<z.ZodBoolean>;
	runnerCapabilities: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
	testingType: z.ZodOptional<z.ZodEnum<[
		"e2e",
		"component",
		"ct"
	]>>;
	tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
	autoCancelAfterFailures: z.ZodOptional<z.ZodUnion<[
		z.ZodNumber,
		z.ZodLiteral<false>
	]>>;
}, "strict", z.ZodTypeAny, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	};
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	};
	ciBuildId: string | number | null;
	group: string | null;
	parallel: boolean | null;
	runnerCapabilities?: Record<string, unknown> | undefined;
	testingType?: "e2e" | "component" | "ct" | undefined;
	tags?: string[] | undefined;
	autoCancelAfterFailures?: number | false | undefined;
}, {
	platform: {
		browserName: string;
		browserVersion: string;
		osCpus: unknown[];
		osMemory: Record<string, unknown> | null;
		osName: string;
		osVersion: string;
	};
	projectId: string;
	recordKey: string;
	specPattern: string | null;
	specs: string[];
	ci: {
		params?: Record<string, any> | null | undefined;
		provider?: string | null | undefined;
	};
	commit: {
		message: string | null;
		authorEmail: string | null;
		authorName: string | null;
		branch: string | null;
		remoteOrigin: string | null;
		sha: string | null;
		defaultBranch: string | null;
	};
	ciBuildId: string | number | null;
	group: string | null;
	parallel: boolean | null;
	runnerCapabilities?: Record<string, unknown> | undefined;
	testingType?: "e2e" | "component" | "ct" | undefined;
	tags?: string[] | undefined;
	autoCancelAfterFailures?: number | false | undefined;
}>;
export declare const postRunRequest_v3Example: z.infer<typeof postRunRequest_v3Strict>;
export declare const postRunResponse_v1: z.ZodObject<{
	buildId: z.ZodString;
}, "strip", z.ZodTypeAny, {
	buildId: string;
}, {
	buildId: string;
}>;
declare const postRunResponse_v1Strict: z.ZodObject<{
	buildId: z.ZodString;
}, "strict", z.ZodTypeAny, {
	buildId: string;
}, {
	buildId: string;
}>;
export declare const postRunResponse_v1Example: z.infer<typeof postRunResponse_v1Strict>;
export declare const postRunResponse_v2: z.ZodObject<{
	runId: z.ZodString;
	groupId: z.ZodString;
	machineId: z.ZodString;
	runUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
	groupId: string;
	machineId: string;
	runId: string;
	runUrl: string;
}, {
	groupId: string;
	machineId: string;
	runId: string;
	runUrl: string;
}>;
declare const postRunResponse_v2Strict: z.ZodObject<{
	runId: z.ZodString;
	groupId: z.ZodString;
	machineId: z.ZodString;
	runUrl: z.ZodString;
}, "strict", z.ZodTypeAny, {
	groupId: string;
	machineId: string;
	runId: string;
	runUrl: string;
}, {
	groupId: string;
	machineId: string;
	runId: string;
	runUrl: string;
}>;
export declare const postRunResponse_v2Example: z.infer<typeof postRunResponse_v2Strict>;
export declare const postRunResponse_v3: z.ZodObject<{
	groupId: z.ZodString;
	machineId: z.ZodString;
	runId: z.ZodString;
	runUrl: z.ZodString;
	warnings: z.ZodArray<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		code: z.ZodString;
		message: z.ZodString;
		name: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		code: string;
		message: string;
		name: string;
	}, {
		code: string;
		message: string;
		name: string;
	}>>, "many">;
	tags: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
	groupId: string;
	machineId: string;
	tags: string[] | null;
	runId: string;
	runUrl: string;
	warnings: (Record<string, unknown> & {
		code: string;
		message: string;
		name: string;
	})[];
}, {
	groupId: string;
	machineId: string;
	tags: string[] | null;
	runId: string;
	runUrl: string;
	warnings: (Record<string, unknown> & {
		code: string;
		message: string;
		name: string;
	})[];
}>;
export type PostRunResponse_v3Type = z.infer<typeof postRunResponse_v3>;
declare const postRunResponse_v3Strict: z.ZodObject<{
	groupId: z.ZodString;
	machineId: z.ZodString;
	runId: z.ZodString;
	runUrl: z.ZodString;
	warnings: z.ZodArray<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		code: z.ZodString;
		message: z.ZodString;
		name: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		code: string;
		message: string;
		name: string;
	}, {
		code: string;
		message: string;
		name: string;
	}>>, "many">;
	tags: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
}, "strict", z.ZodTypeAny, {
	groupId: string;
	machineId: string;
	tags: string[] | null;
	runId: string;
	runUrl: string;
	warnings: (Record<string, unknown> & {
		code: string;
		message: string;
		name: string;
	})[];
}, {
	groupId: string;
	machineId: string;
	tags: string[] | null;
	runId: string;
	runUrl: string;
	warnings: (Record<string, unknown> & {
		code: string;
		message: string;
		name: string;
	})[];
}>;
export declare const postRunResponse_v3Example: z.infer<typeof postRunResponse_v3Strict>;
export declare const putInstanceRequest_v1: z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
	ciProvider: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	ciUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	cypressConfig: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
	cypressVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	duration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
	error: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	failingTests: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
		clientId: z.ZodString;
		duration: z.ZodNumber;
		error: z.ZodString;
		stack: z.ZodString;
		title: z.ZodString;
		videoTimestamp: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		error: string;
		duration: number;
		clientId: string;
		title: string;
		stack: string;
		videoTimestamp: number;
	}, {
		error: string;
		duration: number;
		clientId: string;
		title: string;
		stack: string;
		videoTimestamp: number;
	}>, "many">>>;
	failures: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
	passes: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
	pending: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
	screenshots: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
		clientId: z.ZodString;
		height: z.ZodNumber;
		testId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
		testTitle: z.ZodString;
		title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
		width: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		height: number;
		testTitle: string;
		width: number;
		testId?: string | null | undefined;
		title?: string | null | undefined;
	}, {
		clientId: string;
		height: number;
		testTitle: string;
		width: number;
		testId?: string | null | undefined;
		title?: string | null | undefined;
	}>, "many">>>;
	spec: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	stdout: z.ZodOptional<z.ZodNullable<z.ZodString>>;
	tests: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
	video: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
	ciProvider?: string | null | undefined;
	ciUrl?: string | null | undefined;
	cypressConfig?: Record<string, unknown> | null | undefined;
	cypressVersion?: string | null | undefined;
	duration?: number | null | undefined;
	error?: string | null | undefined;
	failingTests?: {
		error: string;
		duration: number;
		clientId: string;
		title: string;
		stack: string;
		videoTimestamp: number;
	}[] | null | undefined;
	failures?: number | null | undefined;
	passes?: number | null | undefined;
	pending?: number | null | undefined;
	screenshots?: {
		clientId: string;
		height: number;
		testTitle: string;
		width: number;
		testId?: string | null | undefined;
		title?: string | null | undefined;
	}[] | null | undefined;
	spec?: string | null | undefined;
	stdout?: string | null | undefined;
	tests?: number | null | undefined;
	video?: boolean | null | undefined;
}, {
	ciProvider?: string | null | undefined;
	ciUrl?: string | null | undefined;
	cypressConfig?: Record<string, unknown> | null | undefined;
	cypressVersion?: string | null | undefined;
	duration?: number | null | undefined;
	error?: string | null | undefined;
	failingTests?: {
		error: string;
		duration: number;
		clientId: string;
		title: string;
		stack: string;
		videoTimestamp: number;
	}[] | null | undefined;
	failures?: number | null | undefined;
	passes?: number | null | undefined;
	pending?: number | null | undefined;
	screenshots?: {
		clientId: string;
		height: number;
		testTitle: string;
		width: number;
		testId?: string | null | undefined;
		title?: string | null | undefined;
	}[] | null | undefined;
	spec?: string | null | undefined;
	stdout?: string | null | undefined;
	tests?: number | null | undefined;
	video?: boolean | null | undefined;
}>>;
export declare const putInstanceRequest_v1Example: z.infer<typeof putInstanceRequest_v1>;
export declare const putInstanceRequest_v2: z.ZodObject<{
	cypressConfig: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	error: z.ZodNullable<z.ZodString>;
	hooks: z.ZodNullable<z.ZodArray<z.ZodObject<{
		body: z.ZodString;
		hookId: z.ZodString;
		hookName: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}>, "many">>;
	reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		duration: z.ZodNumber;
		end: z.ZodString;
		start: z.ZodString;
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}>>>;
	screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
		height: z.ZodNumber;
		name: z.ZodNullable<z.ZodString>;
		screenshotId: z.ZodString;
		takenAt: z.ZodString;
		testId: z.ZodString;
		width: z.ZodNumber;
		testAttemptIndex: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}>, "many">>;
	stats: z.ZodObject<{
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		skipped: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
		wallClockDuration: z.ZodNumber;
		wallClockEndedAt: z.ZodString;
		wallClockStartedAt: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}>;
	stdout: z.ZodNullable<z.ZodString>;
	tests: z.ZodNullable<z.ZodArray<z.ZodObject<{
		body: z.ZodNullable<z.ZodString>;
		error: z.ZodNullable<z.ZodString>;
		failedFromHookId: z.ZodNullable<z.ZodString>;
		stack: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		testId: z.ZodString;
		timings: z.ZodNullable<z.ZodObject<{
			test: z.ZodOptional<z.ZodObject<{
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				fnDuration: number;
				afterFnDuration: number;
			}, {
				fnDuration: number;
				afterFnDuration: number;
			}>>;
			lifecycle: z.ZodOptional<z.ZodNumber>;
			"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
		}, "strip", z.ZodTypeAny, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}>>;
		title: z.ZodArray<z.ZodString, "many">;
		videoTimestamp: z.ZodNullable<z.ZodNumber>;
		wallClockDuration: z.ZodNullable<z.ZodNumber>;
		wallClockStartedAt: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}>, "many">>;
	video: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
	tests: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	stdout: string | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}, {
	tests: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	stdout: string | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}>;
export type PutInstanceRequest_v2Type = z.infer<typeof putInstanceRequest_v2>;
declare const putInstanceRequest_v2Strict: z.ZodObject<{
	cypressConfig: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	error: z.ZodNullable<z.ZodString>;
	hooks: z.ZodNullable<z.ZodArray<z.ZodObject<{
		body: z.ZodString;
		hookId: z.ZodString;
		hookName: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}>, "many">>;
	reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		duration: z.ZodNumber;
		end: z.ZodString;
		start: z.ZodString;
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}>>>;
	screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
		height: z.ZodNumber;
		name: z.ZodNullable<z.ZodString>;
		screenshotId: z.ZodString;
		takenAt: z.ZodString;
		testId: z.ZodString;
		width: z.ZodNumber;
		testAttemptIndex: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}>, "many">>;
	stats: z.ZodObject<{
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		skipped: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
		wallClockDuration: z.ZodNumber;
		wallClockEndedAt: z.ZodString;
		wallClockStartedAt: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}>;
	stdout: z.ZodNullable<z.ZodString>;
	tests: z.ZodNullable<z.ZodArray<z.ZodObject<{
		body: z.ZodNullable<z.ZodString>;
		error: z.ZodNullable<z.ZodString>;
		failedFromHookId: z.ZodNullable<z.ZodString>;
		stack: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		testId: z.ZodString;
		timings: z.ZodNullable<z.ZodObject<{
			test: z.ZodOptional<z.ZodObject<{
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				fnDuration: number;
				afterFnDuration: number;
			}, {
				fnDuration: number;
				afterFnDuration: number;
			}>>;
			lifecycle: z.ZodOptional<z.ZodNumber>;
			"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
			"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
				hookId: z.ZodString;
				fnDuration: z.ZodNumber;
				afterFnDuration: z.ZodNumber;
			}, "strip", z.ZodTypeAny, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}, {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}>, "many">>;
		}, "strip", z.ZodTypeAny, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}, {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		}>>;
		title: z.ZodArray<z.ZodString, "many">;
		videoTimestamp: z.ZodNullable<z.ZodNumber>;
		wallClockDuration: z.ZodNullable<z.ZodNumber>;
		wallClockStartedAt: z.ZodNullable<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}, {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}>, "many">>;
	video: z.ZodBoolean;
}, "strict", z.ZodTypeAny, {
	tests: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	stdout: string | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}, {
	tests: {
		wallClockDuration: number | null;
		wallClockStartedAt: string | null;
		error: string | null;
		testId: string;
		title: string[];
		stack: string | null;
		failedFromHookId: string | null;
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		timings: {
			test?: {
				fnDuration: number;
				afterFnDuration: number;
			} | undefined;
			lifecycle?: number | undefined;
			"before each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"before all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after each"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
			"after all"?: {
				hookId: string;
				fnDuration: number;
				afterFnDuration: number;
			}[] | undefined;
		} | null;
		videoTimestamp: number | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	stdout: string | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}>;
export declare const putInstanceRequest_v2Example: z.infer<typeof putInstanceRequest_v2Strict>;
export declare const putInstanceRequest_v3: z.ZodObject<{
	error: z.ZodNullable<z.ZodString>;
	cypressConfig: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
		height: z.ZodNumber;
		name: z.ZodNullable<z.ZodString>;
		screenshotId: z.ZodString;
		takenAt: z.ZodString;
		testId: z.ZodString;
		width: z.ZodNumber;
		testAttemptIndex: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}>, "many">>;
	video: z.ZodBoolean;
	hooks: z.ZodNullable<z.ZodArray<z.ZodObject<{
		body: z.ZodString;
		hookId: z.ZodString;
		hookName: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}>, "many">>;
	reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		duration: z.ZodNumber;
		end: z.ZodString;
		start: z.ZodString;
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}>>>;
	stats: z.ZodObject<{
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		skipped: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
		wallClockDuration: z.ZodNumber;
		wallClockEndedAt: z.ZodString;
		wallClockStartedAt: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}>;
	tests: z.ZodNullable<z.ZodArray<z.ZodObject<{
		attempts: z.ZodArray<z.ZodObject<{
			error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
				codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
					absoluteFile: z.ZodNullable<z.ZodString>;
					column: z.ZodNullable<z.ZodNumber>;
					frame: z.ZodNullable<z.ZodString>;
					language: z.ZodNullable<z.ZodString>;
					line: z.ZodNullable<z.ZodNumber>;
					originalFile: z.ZodNullable<z.ZodString>;
					relativeFile: z.ZodNullable<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}>>>;
				message: z.ZodNullable<z.ZodString>;
				name: z.ZodNullable<z.ZodString>;
				stack: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}>>>;
			failedFromHookId: z.ZodNullable<z.ZodString>;
			state: z.ZodEnum<[
				"passed",
				"pending",
				"skipped",
				"failed",
				"running",
				"cancelled",
				"errored",
				"timedOut"
			]>;
			timings: z.ZodNullable<z.ZodObject<{
				test: z.ZodOptional<z.ZodObject<{
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					fnDuration: number;
					afterFnDuration: number;
				}, {
					fnDuration: number;
					afterFnDuration: number;
				}>>;
				lifecycle: z.ZodOptional<z.ZodNumber>;
				"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
			}, "strip", z.ZodTypeAny, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}>>;
			videoTimestamp: z.ZodNullable<z.ZodNumber>;
			wallClockDuration: z.ZodNullable<z.ZodNumber>;
			wallClockStartedAt: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}>, "many">;
		body: z.ZodNullable<z.ZodString>;
		displayError: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		testId: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}, {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}>, "many">>;
}, "strip", z.ZodTypeAny, {
	tests: {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}, {
	tests: {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}>;
export type PutInstanceRequest_v3Type = z.infer<typeof putInstanceRequest_v3>;
declare const putInstanceRequest_v3Strict: z.ZodObject<{
	error: z.ZodNullable<z.ZodString>;
	cypressConfig: z.ZodRecord<z.ZodString, z.ZodUnknown>;
	screenshots: z.ZodNullable<z.ZodArray<z.ZodObject<{
		height: z.ZodNumber;
		name: z.ZodNullable<z.ZodString>;
		screenshotId: z.ZodString;
		takenAt: z.ZodString;
		testId: z.ZodString;
		width: z.ZodNumber;
		testAttemptIndex: z.ZodOptional<z.ZodNumber>;
	}, "strip", z.ZodTypeAny, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}, {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}>, "many">>;
	video: z.ZodBoolean;
	hooks: z.ZodNullable<z.ZodArray<z.ZodObject<{
		body: z.ZodString;
		hookId: z.ZodString;
		hookName: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}, {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}>, "many">>;
	reporterStats: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
		duration: z.ZodNumber;
		end: z.ZodString;
		start: z.ZodString;
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}, {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}>>>;
	stats: z.ZodObject<{
		failures: z.ZodNumber;
		passes: z.ZodNumber;
		pending: z.ZodNumber;
		skipped: z.ZodNumber;
		suites: z.ZodNumber;
		tests: z.ZodNumber;
		wallClockDuration: z.ZodNumber;
		wallClockEndedAt: z.ZodString;
		wallClockStartedAt: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}, {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	}>;
	tests: z.ZodNullable<z.ZodArray<z.ZodObject<{
		attempts: z.ZodArray<z.ZodObject<{
			error: z.ZodNullable<z.ZodIntersection<z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodObject<{
				codeFrame: z.ZodOptional<z.ZodNullable<z.ZodObject<{
					absoluteFile: z.ZodNullable<z.ZodString>;
					column: z.ZodNullable<z.ZodNumber>;
					frame: z.ZodNullable<z.ZodString>;
					language: z.ZodNullable<z.ZodString>;
					line: z.ZodNullable<z.ZodNumber>;
					originalFile: z.ZodNullable<z.ZodString>;
					relativeFile: z.ZodNullable<z.ZodString>;
				}, "strip", z.ZodTypeAny, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}, {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				}>>>;
				message: z.ZodNullable<z.ZodString>;
				name: z.ZodNullable<z.ZodString>;
				stack: z.ZodNullable<z.ZodString>;
			}, "strip", z.ZodTypeAny, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}, {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}>>>;
			failedFromHookId: z.ZodNullable<z.ZodString>;
			state: z.ZodEnum<[
				"passed",
				"pending",
				"skipped",
				"failed",
				"running",
				"cancelled",
				"errored",
				"timedOut"
			]>;
			timings: z.ZodNullable<z.ZodObject<{
				test: z.ZodOptional<z.ZodObject<{
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					fnDuration: number;
					afterFnDuration: number;
				}, {
					fnDuration: number;
					afterFnDuration: number;
				}>>;
				lifecycle: z.ZodOptional<z.ZodNumber>;
				"before each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"before all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after each": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
				"after all": z.ZodOptional<z.ZodArray<z.ZodObject<{
					hookId: z.ZodString;
					fnDuration: z.ZodNumber;
					afterFnDuration: z.ZodNumber;
				}, "strip", z.ZodTypeAny, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}, {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}>, "many">>;
			}, "strip", z.ZodTypeAny, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}, {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			}>>;
			videoTimestamp: z.ZodNullable<z.ZodNumber>;
			wallClockDuration: z.ZodNullable<z.ZodNumber>;
			wallClockStartedAt: z.ZodNullable<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}, {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}>, "many">;
		body: z.ZodNullable<z.ZodString>;
		displayError: z.ZodNullable<z.ZodString>;
		state: z.ZodEnum<[
			"passed",
			"pending",
			"skipped",
			"failed",
			"running",
			"cancelled",
			"errored",
			"timedOut"
		]>;
		testId: z.ZodString;
		title: z.ZodArray<z.ZodString, "many">;
	}, "strip", z.ZodTypeAny, {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}, {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}>, "many">>;
}, "strict", z.ZodTypeAny, {
	tests: {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}, {
	tests: {
		testId: string;
		title: string[];
		state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
		attempts: {
			wallClockDuration: number | null;
			wallClockStartedAt: string | null;
			error: (Record<string, unknown> & {
				message: string | null;
				name: string | null;
				stack: string | null;
				codeFrame?: {
					absoluteFile: string | null;
					column: number | null;
					frame: string | null;
					language: string | null;
					line: number | null;
					originalFile: string | null;
					relativeFile: string | null;
				} | null | undefined;
			}) | null;
			failedFromHookId: string | null;
			state: "running" | "errored" | "timedOut" | "failed" | "passed" | "cancelled" | "pending" | "skipped";
			timings: {
				test?: {
					fnDuration: number;
					afterFnDuration: number;
				} | undefined;
				lifecycle?: number | undefined;
				"before each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"before all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after each"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
				"after all"?: {
					hookId: string;
					fnDuration: number;
					afterFnDuration: number;
				}[] | undefined;
			} | null;
			videoTimestamp: number | null;
		}[];
		displayError: string | null;
		body: string | null;
	}[] | null;
	error: string | null;
	cypressConfig: Record<string, unknown>;
	screenshots: {
		height: number;
		testId: string;
		width: number;
		name: string | null;
		screenshotId: string;
		takenAt: string;
		testAttemptIndex?: number | undefined;
	}[] | null;
	video: boolean;
	hooks: {
		title: string[];
		hookId: string;
		body: string;
		hookName: string;
	}[] | null;
	reporterStats: (Record<string, unknown> & {
		pending: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		duration: number;
		end: string;
		start: string;
	}) | null;
	stats: {
		pending: number;
		skipped: number;
		failures: number;
		passes: number;
		suites: number;
		tests: number;
		wallClockDuration: number;
		wallClockEndedAt: string;
		wallClockStartedAt: string;
	};
}>;
export declare const putInstanceRequest_v3Example: z.infer<typeof putInstanceRequest_v3Strict>;
export declare const putInstanceResponse_v1: z.ZodObject<{
	screenshotUploadUrls: z.ZodArray<z.ZodObject<{
		clientId: z.ZodString;
		uploadUrl: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		uploadUrl: string;
	}, {
		clientId: string;
		uploadUrl: string;
	}>, "many">;
	videoUploadUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	screenshotUploadUrls: {
		clientId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}, {
	screenshotUploadUrls: {
		clientId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}>;
declare const putInstanceResponse_v1Strict: z.ZodObject<{
	screenshotUploadUrls: z.ZodArray<z.ZodObject<{
		clientId: z.ZodString;
		uploadUrl: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		clientId: string;
		uploadUrl: string;
	}, {
		clientId: string;
		uploadUrl: string;
	}>, "many">;
	videoUploadUrl: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	screenshotUploadUrls: {
		clientId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}, {
	screenshotUploadUrls: {
		clientId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}>;
export declare const putInstanceResponse_v1Example: z.infer<typeof putInstanceResponse_v1Strict>;
export declare const putInstanceResponse_v2: z.ZodObject<{
	screenshotUploadUrls: z.ZodArray<z.ZodObject<{
		screenshotId: z.ZodString;
		uploadUrl: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		screenshotId: string;
		uploadUrl: string;
	}, {
		screenshotId: string;
		uploadUrl: string;
	}>, "many">;
	videoUploadUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}>;
export type PutInstanceResponse_v2Type = z.infer<typeof putInstanceResponse_v2>;
declare const putInstanceResponse_v2Strict: z.ZodObject<{
	screenshotUploadUrls: z.ZodArray<z.ZodObject<{
		screenshotId: z.ZodString;
		uploadUrl: z.ZodString;
	}, "strip", z.ZodTypeAny, {
		screenshotId: string;
		uploadUrl: string;
	}, {
		screenshotId: string;
		uploadUrl: string;
	}>, "many">;
	videoUploadUrl: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}, {
	screenshotUploadUrls: {
		screenshotId: string;
		uploadUrl: string;
	}[];
	videoUploadUrl?: string | undefined;
}>;
export declare const putInstanceResponse_v2Example: z.infer<typeof putInstanceResponse_v2Strict>;
export declare const putInstanceStdoutRequest_v1: z.ZodObject<{
	stdout: z.ZodString;
}, "strip", z.ZodTypeAny, {
	stdout: string;
}, {
	stdout: string;
}>;
export type PutInstanceStdoutRequest_v1Type = z.infer<typeof putInstanceStdoutRequest_v1>;
declare const putInstanceStdoutRequest_v1Strict: z.ZodObject<{
	stdout: z.ZodString;
}, "strict", z.ZodTypeAny, {
	stdout: string;
}, {
	stdout: string;
}>;
export declare const putInstanceStdoutRequest_v1Example: z.infer<typeof putInstanceStdoutRequest_v1Strict>;
export declare function getExample<K extends keyof RecordSchemaVersions, V extends Extract<keyof RecordSchemaVersions[K], number | string>, T extends Extract<keyof RecordSchemaVersions[K][V], "req" | "res">>(route: K, version: V, type: T): RecordSchemaVersions[K][V][T] extends z.ZodType ? z.infer<RecordSchemaVersions[K][V][T]> : never;
export declare function assertSchema<K extends keyof RecordSchemaVersions, V extends Extract<keyof RecordSchemaVersions[K], number | string>, T extends Extract<keyof RecordSchemaVersions[K][V], "req" | "res">>(route: K, version: V, type: T): (body: any) => void;

export {};
